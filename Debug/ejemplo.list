
ejemplo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001834  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001aa8  08001aa8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001aa8  08001aa8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001aa8  08001aa8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa8  08001aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aac  08001aac  00011aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001b0c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001b0c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a75  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000032f  00000000  00000000  00020b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00020e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007d  00000000  00000000  00020f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000137f  00000000  00000000  00020fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f8b  00000000  00000000  00022324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006477  00000000  00000000  000232af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006fc  00000000  00000000  00029728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  00029e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080018dc 	.word	0x080018dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080018dc 	.word	0x080018dc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <get_number_from_key>:
    cuatro, cinco, seis, B, // Columna 2: 4, 5, 6, B
    siete, ocho, nueve, C, // Columna 3: 7, 8, 9, C
    E, cero, F, D // Columna 4: *, 0, #, D
};

uint32_t get_number_from_key(uint32_t key) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
        7, 8, 9, 0xFF,
        0xFF, 0, 0xFF, 0xFF
    };

    // Asegúrate de que la clave está dentro del rango del array
    if (key < sizeof(key_map)) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b0f      	cmp	r3, #15
 8000414:	d80b      	bhi.n	800042e <get_number_from_key+0x26>
        uint32_t number = key_map[key];
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <get_number_from_key+0x30>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	18d3      	adds	r3, r2, r3
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	60fb      	str	r3, [r7, #12]
        return (number == 0xFF ? 0 : number);  // Retorna 0 si la tecla no es válida
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	2bff      	cmp	r3, #255	; 0xff
 8000424:	d001      	beq.n	800042a <get_number_from_key+0x22>
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	e002      	b.n	8000430 <get_number_from_key+0x28>
 800042a:	2300      	movs	r3, #0
 800042c:	e000      	b.n	8000430 <get_number_from_key+0x28>
    }
    return 0;  // Retorna 0 si la clave está fuera de rango
 800042e:	2300      	movs	r3, #0
}
 8000430:	0018      	movs	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	b004      	add	sp, #16
 8000436:	bd80      	pop	{r7, pc}
 8000438:	08001a58 	.word	0x08001a58

0800043c <get_key_from_number>:

uint32_t get_key_from_number(uint32_t number) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
        9,   // 8
        10   // 9
    };

    // Asegúrate de que el número está dentro del rango de la tabla
    if (number < sizeof(number_to_key_map)) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b09      	cmp	r3, #9
 8000448:	d804      	bhi.n	8000454 <get_key_from_number+0x18>
        return number_to_key_map[number];
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <get_key_from_number+0x24>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	18d3      	adds	r3, r2, r3
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	e000      	b.n	8000456 <get_key_from_number+0x1a>
    }
    return 0xFF;  // Retorna 0xFF si el número está fuera de rango
 8000454:	23ff      	movs	r3, #255	; 0xff
}
 8000456:	0018      	movs	r0, r3
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	08001a68 	.word	0x08001a68

08000464 <main>:

int main(void)
{
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	b0b7      	sub	sp, #220	; 0xdc
 8000468:	af00      	add	r7, sp, #0

    // Habilitar el reloj para GPIOC y GPIOB
    RCC->IOPENR |= (1 << 2) | (1 << 1) | (1 << 0);
 800046a:	4bd5      	ldr	r3, [pc, #852]	; (80007c0 <main+0x35c>)
 800046c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800046e:	4bd4      	ldr	r3, [pc, #848]	; (80007c0 <main+0x35c>)
 8000470:	2107      	movs	r1, #7
 8000472:	430a      	orrs	r2, r1
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
////////////// HABILITAR USART2 //////////////////////
//////////////////////////////////////////////////////

    	//Enable HSI 16MHz
		//HSI on
	RCC->CR |= (1<<0);
 8000476:	4bd2      	ldr	r3, [pc, #840]	; (80007c0 <main+0x35c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4bd1      	ldr	r3, [pc, #836]	; (80007c0 <main+0x35c>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	601a      	str	r2, [r3, #0]
		//HSI16 as SYSCLK
	RCC->CFGR |= (1<<0);
 8000482:	4bcf      	ldr	r3, [pc, #828]	; (80007c0 <main+0x35c>)
 8000484:	68da      	ldr	r2, [r3, #12]
 8000486:	4bce      	ldr	r3, [pc, #824]	; (80007c0 <main+0x35c>)
 8000488:	2101      	movs	r1, #1
 800048a:	430a      	orrs	r2, r1
 800048c:	60da      	str	r2, [r3, #12]


	//Enable CLK
		//For the Peripherals under use via RCC reg
		//PORTA
	RCC->IOPENR |= 1<<0;
 800048e:	4bcc      	ldr	r3, [pc, #816]	; (80007c0 <main+0x35c>)
 8000490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000492:	4bcb      	ldr	r3, [pc, #812]	; (80007c0 <main+0x35c>)
 8000494:	2101      	movs	r1, #1
 8000496:	430a      	orrs	r2, r1
 8000498:	62da      	str	r2, [r3, #44]	; 0x2c


	//USART 2 pin configuration
		//Alternate Function MODE for PA2 and PA3
	GPIOA->MODER &= ~(1<<4);//PA2 as AF, MODER [10]
 800049a:	23a0      	movs	r3, #160	; 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	23a0      	movs	r3, #160	; 0xa0
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	2110      	movs	r1, #16
 80004a6:	438a      	bics	r2, r1
 80004a8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1<<6);//PA3 as AF, MODER [10]
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	23a0      	movs	r3, #160	; 0xa0
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	2140      	movs	r1, #64	; 0x40
 80004b6:	438a      	bics	r2, r1
 80004b8:	601a      	str	r2, [r3, #0]
		//Select which MODER, AF4 for USART2, TX on PA2 :: RX on PA3
	GPIOA->AFR[0] |= 1<<10; //PA2 mapped as AF4
 80004ba:	23a0      	movs	r3, #160	; 0xa0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	6a1a      	ldr	r2, [r3, #32]
 80004c0:	23a0      	movs	r3, #160	; 0xa0
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	00c9      	lsls	r1, r1, #3
 80004c8:	430a      	orrs	r2, r1
 80004ca:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 1<<14; //PA3 mapped as AF4
 80004cc:	23a0      	movs	r3, #160	; 0xa0
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	6a1a      	ldr	r2, [r3, #32]
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	01c9      	lsls	r1, r1, #7
 80004da:	430a      	orrs	r2, r1
 80004dc:	621a      	str	r2, [r3, #32]

	//USART2 peripheral configuration
		//USART2 clock enable on RCC APB1ENR register
	RCC->APB1ENR |= 1<<17;
 80004de:	4bb8      	ldr	r3, [pc, #736]	; (80007c0 <main+0x35c>)
 80004e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004e2:	4bb7      	ldr	r3, [pc, #732]	; (80007c0 <main+0x35c>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0289      	lsls	r1, r1, #10
 80004e8:	430a      	orrs	r2, r1
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
		//Baud Rate calculation @9600 with 16Mhz
	USART2->BRR = 1667;
 80004ec:	4bb5      	ldr	r3, [pc, #724]	; (80007c4 <main+0x360>)
 80004ee:	4ab6      	ldr	r2, [pc, #728]	; (80007c8 <main+0x364>)
 80004f0:	60da      	str	r2, [r3, #12]
		//Enable TX and RX
	USART2->CR1 |= (1<<2)|(1<<3);
 80004f2:	4bb4      	ldr	r3, [pc, #720]	; (80007c4 <main+0x360>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4bb3      	ldr	r3, [pc, #716]	; (80007c4 <main+0x360>)
 80004f8:	210c      	movs	r1, #12
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
		//Enable Peripheral
	USART2->CR1 |= 1<<0;
 80004fe:	4bb1      	ldr	r3, [pc, #708]	; (80007c4 <main+0x360>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4bb0      	ldr	r3, [pc, #704]	; (80007c4 <main+0x360>)
 8000504:	2101      	movs	r1, #1
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]
/////////////////// Habilitar salidas para displays      ////////////
/////////////////// y entradas para el teclado matricial ////////////
/////////////////////////////////////////////////////////////////////

    // Configurar los pines de GPIOC como salida para los displays
    uint32_t portC_masks = (0b01 << 8) | (0b01 << 10) | (0b01 << 12) | (0b01 << 14) | (0b01 << 16) | (0b01 << 18);
 800050a:	4bb0      	ldr	r3, [pc, #704]	; (80007cc <main+0x368>)
 800050c:	20cc      	movs	r0, #204	; 0xcc
 800050e:	183a      	adds	r2, r7, r0
 8000510:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(0b11 << 8 | 0b11 << 10 | 0b11 << 12 | 0b11 << 14 | 0b11 << 16 | 0b11 << 18);
 8000512:	4baf      	ldr	r3, [pc, #700]	; (80007d0 <main+0x36c>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4bae      	ldr	r3, [pc, #696]	; (80007d0 <main+0x36c>)
 8000518:	49ae      	ldr	r1, [pc, #696]	; (80007d4 <main+0x370>)
 800051a:	400a      	ands	r2, r1
 800051c:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= portC_masks;
 800051e:	4bac      	ldr	r3, [pc, #688]	; (80007d0 <main+0x36c>)
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	4bab      	ldr	r3, [pc, #684]	; (80007d0 <main+0x36c>)
 8000524:	183a      	adds	r2, r7, r0
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	430a      	orrs	r2, r1
 800052a:	601a      	str	r2, [r3, #0]



    // Configurar los pines de GPIOB como salida para los segmentos de los displays
    GPIOB->MODER &= ~(0xFFFF); // Limpiar los modos de los primeros 8 pines (pines 0 a 7)
 800052c:	4baa      	ldr	r3, [pc, #680]	; (80007d8 <main+0x374>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4ba9      	ldr	r3, [pc, #676]	; (80007d8 <main+0x374>)
 8000532:	0c12      	lsrs	r2, r2, #16
 8000534:	0412      	lsls	r2, r2, #16
 8000536:	601a      	str	r2, [r3, #0]
    uint32_t portB_display_masks = (0b01 << 0) | (0b01 << 2) | (0b01 << 4) | (0b01 << 6) |
 8000538:	4ba8      	ldr	r3, [pc, #672]	; (80007dc <main+0x378>)
 800053a:	22c8      	movs	r2, #200	; 0xc8
 800053c:	18b9      	adds	r1, r7, r2
 800053e:	600b      	str	r3, [r1, #0]
                                   (0b01 << 8) | (0b01 << 10) | (0b01 << 12) | (0b01 << 14);
    GPIOB->MODER |= portB_display_masks; // Establecer los pines del display como salida
 8000540:	4ba5      	ldr	r3, [pc, #660]	; (80007d8 <main+0x374>)
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	4ba4      	ldr	r3, [pc, #656]	; (80007d8 <main+0x374>)
 8000546:	18ba      	adds	r2, r7, r2
 8000548:	6812      	ldr	r2, [r2, #0]
 800054a:	430a      	orrs	r2, r1
 800054c:	601a      	str	r2, [r3, #0]

    // Configurar los pines de GPIOB como salida para controlar las columnas de la matriz del teclado
    GPIOB->MODER &= ~((0b11 << 24) | (0b11 << 26) | (0b11 << 28) | (0b11 << 30)); // Limpiar la configuración actual para los pines 12 a 15
 800054e:	4ba2      	ldr	r3, [pc, #648]	; (80007d8 <main+0x374>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4ba1      	ldr	r3, [pc, #644]	; (80007d8 <main+0x374>)
 8000554:	0212      	lsls	r2, r2, #8
 8000556:	0a12      	lsrs	r2, r2, #8
 8000558:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= ((0b01 << 24) | (0b01 << 26) | (0b01 << 28) | (0b01 << 30)); // Establecer los pines PB12 a PB15 como salidas
 800055a:	4b9f      	ldr	r3, [pc, #636]	; (80007d8 <main+0x374>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b9e      	ldr	r3, [pc, #632]	; (80007d8 <main+0x374>)
 8000560:	21aa      	movs	r1, #170	; 0xaa
 8000562:	05c9      	lsls	r1, r1, #23
 8000564:	430a      	orrs	r2, r1
 8000566:	601a      	str	r2, [r3, #0]

    // Configurar los pines del 16 al 22 de GPIOB con resistencias pull-up
    GPIOB->PUPDR &= ~((0b11 << 16) | (0b11 << 18) | (0b11 << 20) | (0b11 << 22)); // Limpiar configuración de pull-up/pull-down
 8000568:	4b9b      	ldr	r3, [pc, #620]	; (80007d8 <main+0x374>)
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	4b9a      	ldr	r3, [pc, #616]	; (80007d8 <main+0x374>)
 800056e:	499c      	ldr	r1, [pc, #624]	; (80007e0 <main+0x37c>)
 8000570:	400a      	ands	r2, r1
 8000572:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |= ((0b01 << 16) | (0b01 << 18) | (0b01 << 20) | (0b01 << 22)); // Establecer pull-up para pines de entrada
 8000574:	4b98      	ldr	r3, [pc, #608]	; (80007d8 <main+0x374>)
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	4b97      	ldr	r3, [pc, #604]	; (80007d8 <main+0x374>)
 800057a:	21aa      	movs	r1, #170	; 0xaa
 800057c:	03c9      	lsls	r1, r1, #15
 800057e:	430a      	orrs	r2, r1
 8000580:	60da      	str	r2, [r3, #12]

    // Configurar los pines PB8 a PB11 como entrada (teclado matricial)
    GPIOB->MODER &= ~((0b11 << 16) | (0b11 << 18) | (0b11 << 20) | (0b11 << 22)); // Limpiar la configuración actual para los pines 8 a 11
 8000582:	4b95      	ldr	r3, [pc, #596]	; (80007d8 <main+0x374>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b94      	ldr	r3, [pc, #592]	; (80007d8 <main+0x374>)
 8000588:	4995      	ldr	r1, [pc, #596]	; (80007e0 <main+0x37c>)
 800058a:	400a      	ands	r2, r1
 800058c:	601a      	str	r2, [r3, #0]



    while (1)
    {
        for (int col = 0; col < 4; col++)
 800058e:	2300      	movs	r3, #0
 8000590:	22d4      	movs	r2, #212	; 0xd4
 8000592:	18ba      	adds	r2, r7, r2
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	e38b      	b.n	8000cb0 <main+0x84c>
        {
            GPIOB->ODR = (0xF << 12); // Desactiva todas las columnas
 8000598:	4b8f      	ldr	r3, [pc, #572]	; (80007d8 <main+0x374>)
 800059a:	22f0      	movs	r2, #240	; 0xf0
 800059c:	0212      	lsls	r2, r2, #8
 800059e:	615a      	str	r2, [r3, #20]
            GPIOB->ODR &= ~(1 << (12 + col)); // Activa solo la columna actual
 80005a0:	4b8d      	ldr	r3, [pc, #564]	; (80007d8 <main+0x374>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	23d4      	movs	r3, #212	; 0xd4
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	330c      	adds	r3, #12
 80005ac:	2101      	movs	r1, #1
 80005ae:	4099      	lsls	r1, r3
 80005b0:	000b      	movs	r3, r1
 80005b2:	43db      	mvns	r3, r3
 80005b4:	0019      	movs	r1, r3
 80005b6:	4b88      	ldr	r3, [pc, #544]	; (80007d8 <main+0x374>)
 80005b8:	400a      	ands	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]

            delay_ms(10); // Deja tiempo para la estabilización
 80005bc:	200a      	movs	r0, #10
 80005be:	f000 fb9b 	bl	8000cf8 <delay_ms>

            uint32_t rows = GPIOB->IDR & (0xF << 8); // Lee el estado de las filas
 80005c2:	4b85      	ldr	r3, [pc, #532]	; (80007d8 <main+0x374>)
 80005c4:	691a      	ldr	r2, [r3, #16]
 80005c6:	23f0      	movs	r3, #240	; 0xf0
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	4013      	ands	r3, r2
 80005cc:	22c4      	movs	r2, #196	; 0xc4
 80005ce:	18ba      	adds	r2, r7, r2
 80005d0:	6013      	str	r3, [r2, #0]

           for (int row = 0; row < 4; row++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	22d0      	movs	r2, #208	; 0xd0
 80005d6:	18ba      	adds	r2, r7, r2
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	e351      	b.n	8000c80 <main+0x81c>
{
    // Verifica si alguna fila está activa (presionada)
    if (!(rows & (1 << (row + 8))))
 80005dc:	21d0      	movs	r1, #208	; 0xd0
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3308      	adds	r3, #8
 80005e4:	2201      	movs	r2, #1
 80005e6:	409a      	lsls	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	001a      	movs	r2, r3
 80005ec:	23c4      	movs	r3, #196	; 0xc4
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4013      	ands	r3, r2
 80005f4:	d000      	beq.n	80005f8 <main+0x194>
 80005f6:	e33d      	b.n	8000c74 <main+0x810>
    {
        // Calcula el número de tecla basado en la columna y fila actual
        uint32_t key_number = col * 4 + row;
 80005f8:	23d4      	movs	r3, #212	; 0xd4
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	009a      	lsls	r2, r3, #2
 8000600:	187b      	adds	r3, r7, r1
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	18d3      	adds	r3, r2, r3
 8000606:	22c0      	movs	r2, #192	; 0xc0
 8000608:	18b9      	adds	r1, r7, r2
 800060a:	600b      	str	r3, [r1, #0]

        // Verifica si la tecla presionada es la tecla D
        if (key_number == TECLA_D)
 800060c:	18bb      	adds	r3, r7, r2
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d135      	bne.n	8000680 <main+0x21c>
        {
            int sum_value = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	67bb      	str	r3, [r7, #120]	; 0x78

            // Obtiene el valor del primer dígito mostrado (unidades)
            int u_value = get_number_from_key(primer_digito);
 8000618:	4b72      	ldr	r3, [pc, #456]	; (80007e4 <main+0x380>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff fef3 	bl	8000408 <get_number_from_key>
 8000622:	0003      	movs	r3, r0
 8000624:	677b      	str	r3, [r7, #116]	; 0x74
            // Obtiene el valor del segundo dígito mostrado (decenas)
            int d_value = get_number_from_key(segundo_digito_display);
 8000626:	4b70      	ldr	r3, [pc, #448]	; (80007e8 <main+0x384>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff feec 	bl	8000408 <get_number_from_key>
 8000630:	0003      	movs	r3, r0
 8000632:	673b      	str	r3, [r7, #112]	; 0x70
            // Obtiene el valor del tercer dígito mostrado (centenas)
            int c_value = get_number_from_key(tercer_digito_display);
 8000634:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <main+0x388>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff fee5 	bl	8000408 <get_number_from_key>
 800063e:	0003      	movs	r3, r0
 8000640:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Calcula el valor total representado en los displays
            sum_value = u_value + (d_value * 10) + (c_value * 100);
 8000642:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000644:	0013      	movs	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	189b      	adds	r3, r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	001a      	movs	r2, r3
 800064e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000650:	18d2      	adds	r2, r2, r3
 8000652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000654:	2164      	movs	r1, #100	; 0x64
 8000656:	434b      	muls	r3, r1
 8000658:	18d3      	adds	r3, r2, r3
 800065a:	67bb      	str	r3, [r7, #120]	; 0x78

            // Suma el valor calculado al valor almacenado
            valor_almacenado = (uint32_t)(valor_almacenado + sum_value);
 800065c:	4b64      	ldr	r3, [pc, #400]	; (80007f0 <main+0x38c>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000662:	18d2      	adds	r2, r2, r3
 8000664:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <main+0x38c>)
 8000666:	601a      	str	r2, [r3, #0]

            // Resetea todos los dígitos mostrados en el display
            primer_digito = segundo_digito_display = tercer_digito_display = 0xff;
 8000668:	4b60      	ldr	r3, [pc, #384]	; (80007ec <main+0x388>)
 800066a:	22ff      	movs	r2, #255	; 0xff
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	4b5f      	ldr	r3, [pc, #380]	; (80007ec <main+0x388>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b5d      	ldr	r3, [pc, #372]	; (80007e8 <main+0x384>)
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	4b5c      	ldr	r3, [pc, #368]	; (80007e8 <main+0x384>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b5a      	ldr	r3, [pc, #360]	; (80007e4 <main+0x380>)
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	e2ec      	b.n	8000c5a <main+0x7f6>
        }
        // Verifica si la tecla presionada es la tecla A
        else if (key_number == TECLA_A)
 8000680:	23c0      	movs	r3, #192	; 0xc0
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d000      	beq.n	800068c <main+0x228>
 800068a:	e0b7      	b.n	80007fc <main+0x398>
        {
            // Verifica si hay un valor previo almacenado antes de decodificar
            if (valor_almacenado != 0)
 800068c:	4b58      	ldr	r3, [pc, #352]	; (80007f0 <main+0x38c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d100      	bne.n	8000696 <main+0x232>
 8000694:	e2e1      	b.n	8000c5a <main+0x7f6>
            {
                int sum_value = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	2688      	movs	r6, #136	; 0x88
 800069a:	19ba      	adds	r2, r7, r6
 800069c:	6013      	str	r3, [r2, #0]

                // Obtiene valores de los dígitos mostrados similar a la tecla D
                int u_value = get_number_from_key(primer_digito);
 800069e:	4b51      	ldr	r3, [pc, #324]	; (80007e4 <main+0x380>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff feb0 	bl	8000408 <get_number_from_key>
 80006a8:	0003      	movs	r3, r0
 80006aa:	2484      	movs	r4, #132	; 0x84
 80006ac:	193a      	adds	r2, r7, r4
 80006ae:	6013      	str	r3, [r2, #0]
                int d_value = get_number_from_key(segundo_digito_display);
 80006b0:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <main+0x384>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff fea7 	bl	8000408 <get_number_from_key>
 80006ba:	0003      	movs	r3, r0
 80006bc:	2580      	movs	r5, #128	; 0x80
 80006be:	197a      	adds	r2, r7, r5
 80006c0:	6013      	str	r3, [r2, #0]
                int c_value = get_number_from_key(tercer_digito_display);
 80006c2:	4b4a      	ldr	r3, [pc, #296]	; (80007ec <main+0x388>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff fe9e 	bl	8000408 <get_number_from_key>
 80006cc:	0003      	movs	r3, r0
 80006ce:	67fb      	str	r3, [r7, #124]	; 0x7c

                // Calcula la suma de los valores mostrados
                sum_value = u_value + (d_value * 10) + (c_value * 100);
 80006d0:	197b      	adds	r3, r7, r5
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	0013      	movs	r3, r2
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	189b      	adds	r3, r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	001a      	movs	r2, r3
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	18d2      	adds	r2, r2, r3
 80006e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006e6:	2164      	movs	r1, #100	; 0x64
 80006e8:	434b      	muls	r3, r1
 80006ea:	18d3      	adds	r3, r2, r3
 80006ec:	19ba      	adds	r2, r7, r6
 80006ee:	6013      	str	r3, [r2, #0]

                // Muestra la suma en curso mediante USART
                char info_msg[50];
                sprintf(info_msg, "Sumando: %d + %d", valor_almacenado, sum_value);
 80006f0:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <main+0x38c>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	19bb      	adds	r3, r7, r6
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	493e      	ldr	r1, [pc, #248]	; (80007f4 <main+0x390>)
 80006fa:	1d38      	adds	r0, r7, #4
 80006fc:	f000 fc50 	bl	8000fa0 <siprintf>
                USART2_putstring_E((uint8_t *)info_msg);
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fbd0 	bl	8000ea8 <USART2_putstring_E>

                // Actualiza el valor almacenado con la nueva suma
                valor_almacenado = (uint32_t)(valor_almacenado + sum_value);
 8000708:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <main+0x38c>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	19bb      	adds	r3, r7, r6
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	18d2      	adds	r2, r2, r3
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <main+0x38c>)
 8000714:	601a      	str	r2, [r3, #0]

                // Descompone el nuevo valor almacenado en dígitos individuales
                u_value = valor_almacenado % 10;
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <main+0x38c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	210a      	movs	r1, #10
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff fd83 	bl	8000228 <__aeabi_uidivmod>
 8000722:	000b      	movs	r3, r1
 8000724:	193a      	adds	r2, r7, r4
 8000726:	6013      	str	r3, [r2, #0]
                d_value = ((valor_almacenado - u_value) % 100) / 10;
 8000728:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <main+0x38c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	193b      	adds	r3, r7, r4
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	2164      	movs	r1, #100	; 0x64
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff fd77 	bl	8000228 <__aeabi_uidivmod>
 800073a:	000b      	movs	r3, r1
 800073c:	210a      	movs	r1, #10
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff fcec 	bl	800011c <__udivsi3>
 8000744:	0003      	movs	r3, r0
 8000746:	197a      	adds	r2, r7, r5
 8000748:	6013      	str	r3, [r2, #0]
                c_value = ((valor_almacenado - d_value - u_value) % 1000) / 100;
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <main+0x38c>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	197b      	adds	r3, r7, r5
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	193b      	adds	r3, r7, r4
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	22fa      	movs	r2, #250	; 0xfa
 800075c:	0091      	lsls	r1, r2, #2
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff fd62 	bl	8000228 <__aeabi_uidivmod>
 8000764:	000b      	movs	r3, r1
 8000766:	2164      	movs	r1, #100	; 0x64
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fcd7 	bl	800011c <__udivsi3>
 800076e:	0003      	movs	r3, r0
 8000770:	67fb      	str	r3, [r7, #124]	; 0x7c

                // Actualiza los displays con los nuevos valores de los dígitos
                primer_digito = get_key_from_number(u_value);
 8000772:	193b      	adds	r3, r7, r4
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fe60 	bl	800043c <get_key_from_number>
 800077c:	0002      	movs	r2, r0
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <main+0x380>)
 8000780:	601a      	str	r2, [r3, #0]
                segundo_digito_display = get_key_from_number(d_value);
 8000782:	197b      	adds	r3, r7, r5
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	0018      	movs	r0, r3
 8000788:	f7ff fe58 	bl	800043c <get_key_from_number>
 800078c:	0002      	movs	r2, r0
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <main+0x384>)
 8000790:	601a      	str	r2, [r3, #0]
                tercer_digito_display = get_key_from_number(c_value);
 8000792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff fe51 	bl	800043c <get_key_from_number>
 800079a:	0002      	movs	r2, r0
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <main+0x388>)
 800079e:	601a      	str	r2, [r3, #0]

                // Muestra el resultado final de la suma mediante USART
                char result_msg[50];
                sprintf(result_msg, "Resultado de la suma: %d", valor_almacenado);
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <main+0x38c>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4914      	ldr	r1, [pc, #80]	; (80007f8 <main+0x394>)
 80007a6:	2438      	movs	r4, #56	; 0x38
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fbf8 	bl	8000fa0 <siprintf>
                USART2_putstring_E((uint8_t *)result_msg);
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fb78 	bl	8000ea8 <USART2_putstring_E>

                // Resetea el valor almacenado después de mostrar el resultado
                valor_almacenado = 0;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <main+0x38c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	e24c      	b.n	8000c5a <main+0x7f6>
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40004400 	.word	0x40004400
 80007c8:	00000683 	.word	0x00000683
 80007cc:	00055500 	.word	0x00055500
 80007d0:	50000800 	.word	0x50000800
 80007d4:	fff000ff 	.word	0xfff000ff
 80007d8:	50000400 	.word	0x50000400
 80007dc:	00005555 	.word	0x00005555
 80007e0:	ff00ffff 	.word	0xff00ffff
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000004 	.word	0x20000004
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000078 	.word	0x20000078
 80007f4:	080018f4 	.word	0x080018f4
 80007f8:	08001908 	.word	0x08001908
            }
        }
else if (key_number == TECLA_B)
 80007fc:	23c0      	movs	r3, #192	; 0xc0
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b07      	cmp	r3, #7
 8000804:	d000      	beq.n	8000808 <main+0x3a4>
 8000806:	e0af      	b.n	8000968 <main+0x504>
{
    // Procesa la resta de valores almacenados en los displays
    if (valor_almacenado != 0)
 8000808:	4ba7      	ldr	r3, [pc, #668]	; (8000aa8 <main+0x644>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d100      	bne.n	8000812 <main+0x3ae>
 8000810:	e223      	b.n	8000c5a <main+0x7f6>
    {
        int sum_value = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	2498      	movs	r4, #152	; 0x98
 8000816:	193a      	adds	r2, r7, r4
 8000818:	6013      	str	r3, [r2, #0]

        // Obtiene valores de los dígitos individuales de los displays
        int u_value = get_number_from_key(primer_digito);  // Unidades
 800081a:	4ba4      	ldr	r3, [pc, #656]	; (8000aac <main+0x648>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff fdf2 	bl	8000408 <get_number_from_key>
 8000824:	0003      	movs	r3, r0
 8000826:	2594      	movs	r5, #148	; 0x94
 8000828:	197a      	adds	r2, r7, r5
 800082a:	6013      	str	r3, [r2, #0]
        int d_value = get_number_from_key(segundo_digito_display); // Decenas
 800082c:	4ba0      	ldr	r3, [pc, #640]	; (8000ab0 <main+0x64c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff fde9 	bl	8000408 <get_number_from_key>
 8000836:	0003      	movs	r3, r0
 8000838:	2690      	movs	r6, #144	; 0x90
 800083a:	19ba      	adds	r2, r7, r6
 800083c:	6013      	str	r3, [r2, #0]
        int c_value = get_number_from_key(tercer_digito_display);  // Centenas
 800083e:	4b9d      	ldr	r3, [pc, #628]	; (8000ab4 <main+0x650>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff fde0 	bl	8000408 <get_number_from_key>
 8000848:	0003      	movs	r3, r0
 800084a:	228c      	movs	r2, #140	; 0x8c
 800084c:	18b9      	adds	r1, r7, r2
 800084e:	600b      	str	r3, [r1, #0]

        // Calcula el valor numérico total de los dígitos mostrados
        sum_value = sum_value + u_value + (d_value * 10) + (c_value * 100);
 8000850:	0020      	movs	r0, r4
 8000852:	1839      	adds	r1, r7, r0
 8000854:	680a      	ldr	r2, [r1, #0]
 8000856:	1979      	adds	r1, r7, r5
 8000858:	680b      	ldr	r3, [r1, #0]
 800085a:	18d1      	adds	r1, r2, r3
 800085c:	19bc      	adds	r4, r7, r6
 800085e:	6822      	ldr	r2, [r4, #0]
 8000860:	0013      	movs	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	189b      	adds	r3, r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	18ca      	adds	r2, r1, r3
 800086a:	238c      	movs	r3, #140	; 0x8c
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2164      	movs	r1, #100	; 0x64
 8000872:	434b      	muls	r3, r1
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	183a      	adds	r2, r7, r0
 8000878:	6013      	str	r3, [r2, #0]

        // Muestra el proceso de resta en USART
        char info_msg[50];
        sprintf(info_msg, "Restando: %d - %d", valor_almacenado, sum_value);
 800087a:	4b8b      	ldr	r3, [pc, #556]	; (8000aa8 <main+0x644>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	0004      	movs	r4, r0
 8000880:	183b      	adds	r3, r7, r0
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	498c      	ldr	r1, [pc, #560]	; (8000ab8 <main+0x654>)
 8000886:	1d38      	adds	r0, r7, #4
 8000888:	f000 fb8a 	bl	8000fa0 <siprintf>
        USART2_putstring_E((uint8_t *)info_msg);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fb0a 	bl	8000ea8 <USART2_putstring_E>

        // Realiza la operación de resta
        valor_almacenado = (uint32_t)(valor_almacenado - sum_value);
 8000894:	4b84      	ldr	r3, [pc, #528]	; (8000aa8 <main+0x644>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	193b      	adds	r3, r7, r4
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	1ad2      	subs	r2, r2, r3
 800089e:	4b82      	ldr	r3, [pc, #520]	; (8000aa8 <main+0x644>)
 80008a0:	601a      	str	r2, [r3, #0]

        // Asegura que el valor no exceda 999
        if (valor_almacenado > 999)
 80008a2:	4b81      	ldr	r3, [pc, #516]	; (8000aa8 <main+0x644>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	23fa      	movs	r3, #250	; 0xfa
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d302      	bcc.n	80008b4 <main+0x450>
            valor_almacenado = 999;
 80008ae:	4b7e      	ldr	r3, [pc, #504]	; (8000aa8 <main+0x644>)
 80008b0:	4a82      	ldr	r2, [pc, #520]	; (8000abc <main+0x658>)
 80008b2:	601a      	str	r2, [r3, #0]

        // Descompone el valor almacenado actualizado en dígitos individuales
        u_value = valor_almacenado % 10;
 80008b4:	4b7c      	ldr	r3, [pc, #496]	; (8000aa8 <main+0x644>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	210a      	movs	r1, #10
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff fcb4 	bl	8000228 <__aeabi_uidivmod>
 80008c0:	000b      	movs	r3, r1
 80008c2:	2494      	movs	r4, #148	; 0x94
 80008c4:	193a      	adds	r2, r7, r4
 80008c6:	6013      	str	r3, [r2, #0]
        d_value = ((valor_almacenado - u_value) % 100) / 10;
 80008c8:	4b77      	ldr	r3, [pc, #476]	; (8000aa8 <main+0x644>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	2164      	movs	r1, #100	; 0x64
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fca7 	bl	8000228 <__aeabi_uidivmod>
 80008da:	000b      	movs	r3, r1
 80008dc:	210a      	movs	r1, #10
 80008de:	0018      	movs	r0, r3
 80008e0:	f7ff fc1c 	bl	800011c <__udivsi3>
 80008e4:	0003      	movs	r3, r0
 80008e6:	2590      	movs	r5, #144	; 0x90
 80008e8:	197a      	adds	r2, r7, r5
 80008ea:	6013      	str	r3, [r2, #0]
        c_value = ((valor_almacenado - d_value - u_value) % 1000) / 100;
 80008ec:	4b6e      	ldr	r3, [pc, #440]	; (8000aa8 <main+0x644>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	197b      	adds	r3, r7, r5
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1ad2      	subs	r2, r2, r3
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	22fa      	movs	r2, #250	; 0xfa
 80008fe:	0091      	lsls	r1, r2, #2
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff fc91 	bl	8000228 <__aeabi_uidivmod>
 8000906:	000b      	movs	r3, r1
 8000908:	2164      	movs	r1, #100	; 0x64
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fc06 	bl	800011c <__udivsi3>
 8000910:	0003      	movs	r3, r0
 8000912:	268c      	movs	r6, #140	; 0x8c
 8000914:	19ba      	adds	r2, r7, r6
 8000916:	6013      	str	r3, [r2, #0]

        // Actualiza los displays con los nuevos dígitos
        primer_digito = get_key_from_number(u_value);
 8000918:	193b      	adds	r3, r7, r4
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fd8d 	bl	800043c <get_key_from_number>
 8000922:	0002      	movs	r2, r0
 8000924:	4b61      	ldr	r3, [pc, #388]	; (8000aac <main+0x648>)
 8000926:	601a      	str	r2, [r3, #0]
        segundo_digito_display = get_key_from_number(d_value);
 8000928:	197b      	adds	r3, r7, r5
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff fd85 	bl	800043c <get_key_from_number>
 8000932:	0002      	movs	r2, r0
 8000934:	4b5e      	ldr	r3, [pc, #376]	; (8000ab0 <main+0x64c>)
 8000936:	601a      	str	r2, [r3, #0]
        tercer_digito_display = get_key_from_number(c_value);
 8000938:	19bb      	adds	r3, r7, r6
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fd7d 	bl	800043c <get_key_from_number>
 8000942:	0002      	movs	r2, r0
 8000944:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <main+0x650>)
 8000946:	601a      	str	r2, [r3, #0]

        // Muestra el resultado final de la resta
        char result_msg[50];
        sprintf(result_msg, "Resultado de la resta: %d", valor_almacenado);
 8000948:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <main+0x644>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	495c      	ldr	r1, [pc, #368]	; (8000ac0 <main+0x65c>)
 800094e:	2438      	movs	r4, #56	; 0x38
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fb24 	bl	8000fa0 <siprintf>
        USART2_putstring_E((uint8_t *)result_msg);
 8000958:	193b      	adds	r3, r7, r4
 800095a:	0018      	movs	r0, r3
 800095c:	f000 faa4 	bl	8000ea8 <USART2_putstring_E>

        // Resetea el valor almacenado después de la operación
        valor_almacenado = 0;
 8000960:	4b51      	ldr	r3, [pc, #324]	; (8000aa8 <main+0x644>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e178      	b.n	8000c5a <main+0x7f6>
    }
}
else if (key_number == TECLA_C)
 8000968:	23c0      	movs	r3, #192	; 0xc0
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b0b      	cmp	r3, #11
 8000970:	d000      	beq.n	8000974 <main+0x510>
 8000972:	e0ab      	b.n	8000acc <main+0x668>
{
    // Procesa la multiplicación de valores almacenados en los displays
    if (valor_almacenado != 0)
 8000974:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <main+0x644>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d100      	bne.n	800097e <main+0x51a>
 800097c:	e16d      	b.n	8000c5a <main+0x7f6>
    {
        int product_value = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	24ac      	movs	r4, #172	; 0xac
 8000982:	193a      	adds	r2, r7, r4
 8000984:	6013      	str	r3, [r2, #0]

        // Obtiene valores de los dígitos individuales de los displays
        int u_value = get_number_from_key(primer_digito);  // Unidades
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <main+0x648>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	0018      	movs	r0, r3
 800098c:	f7ff fd3c 	bl	8000408 <get_number_from_key>
 8000990:	0003      	movs	r3, r0
 8000992:	25a8      	movs	r5, #168	; 0xa8
 8000994:	197a      	adds	r2, r7, r5
 8000996:	6013      	str	r3, [r2, #0]
        int d_value = get_number_from_key(segundo_digito_display); // Decenas
 8000998:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <main+0x64c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fd33 	bl	8000408 <get_number_from_key>
 80009a2:	0003      	movs	r3, r0
 80009a4:	26a4      	movs	r6, #164	; 0xa4
 80009a6:	19ba      	adds	r2, r7, r6
 80009a8:	6013      	str	r3, [r2, #0]
        int c_value = get_number_from_key(tercer_digito_display);  // Centenas
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <main+0x650>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fd2a 	bl	8000408 <get_number_from_key>
 80009b4:	0003      	movs	r3, r0
 80009b6:	21a0      	movs	r1, #160	; 0xa0
 80009b8:	187a      	adds	r2, r7, r1
 80009ba:	6013      	str	r3, [r2, #0]

        // Calcula el valor numérico total de los dígitos mostrados
        int input_value = u_value + (d_value * 10) + (c_value * 100);
 80009bc:	19bb      	adds	r3, r7, r6
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	0013      	movs	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	189b      	adds	r3, r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	001a      	movs	r2, r3
 80009ca:	197b      	adds	r3, r7, r5
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	18d2      	adds	r2, r2, r3
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2164      	movs	r1, #100	; 0x64
 80009d6:	434b      	muls	r3, r1
 80009d8:	18d3      	adds	r3, r2, r3
 80009da:	209c      	movs	r0, #156	; 0x9c
 80009dc:	183a      	adds	r2, r7, r0
 80009de:	6013      	str	r3, [r2, #0]

        // Muestra el proceso de multiplicación en USART
        char info_msg[50];
        sprintf(info_msg, "Multiplicando: %d * %d", valor_almacenado, input_value);
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <main+0x644>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4936      	ldr	r1, [pc, #216]	; (8000ac4 <main+0x660>)
 80009ea:	1d38      	adds	r0, r7, #4
 80009ec:	f000 fad8 	bl	8000fa0 <siprintf>
        USART2_putstring_E((uint8_t *)info_msg);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fa58 	bl	8000ea8 <USART2_putstring_E>

        // Realiza la operación de multiplicación
        product_value = valor_almacenado * input_value;
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <main+0x644>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	209c      	movs	r0, #156	; 0x9c
 80009fe:	183a      	adds	r2, r7, r0
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	4353      	muls	r3, r2
 8000a04:	193a      	adds	r2, r7, r4
 8000a06:	6013      	str	r3, [r2, #0]

        // Descompone el producto en dígitos individuales para los displays
        u_value = product_value % 10;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	210a      	movs	r1, #10
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fcf4 	bl	80003fc <__aeabi_idivmod>
 8000a14:	000b      	movs	r3, r1
 8000a16:	197a      	adds	r2, r7, r5
 8000a18:	6013      	str	r3, [r2, #0]
        d_value = (product_value / 10) % 10;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	210a      	movs	r1, #10
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fc05 	bl	8000230 <__divsi3>
 8000a26:	0003      	movs	r3, r0
 8000a28:	210a      	movs	r1, #10
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fce6 	bl	80003fc <__aeabi_idivmod>
 8000a30:	000b      	movs	r3, r1
 8000a32:	19ba      	adds	r2, r7, r6
 8000a34:	6013      	str	r3, [r2, #0]
        c_value = (product_value / 100) % 10;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2164      	movs	r1, #100	; 0x64
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff fbf7 	bl	8000230 <__divsi3>
 8000a42:	0003      	movs	r3, r0
 8000a44:	210a      	movs	r1, #10
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff fcd8 	bl	80003fc <__aeabi_idivmod>
 8000a4c:	000b      	movs	r3, r1
 8000a4e:	21a0      	movs	r1, #160	; 0xa0
 8000a50:	187a      	adds	r2, r7, r1
 8000a52:	6013      	str	r3, [r2, #0]

        // Actualiza los displays con los nuevos dígitos
        primer_digito = get_key_from_number(u_value);
 8000a54:	197b      	adds	r3, r7, r5
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fcef 	bl	800043c <get_key_from_number>
 8000a5e:	0002      	movs	r2, r0
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <main+0x648>)
 8000a62:	601a      	str	r2, [r3, #0]
        segundo_digito_display = get_key_from_number(d_value);
 8000a64:	19bb      	adds	r3, r7, r6
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fce7 	bl	800043c <get_key_from_number>
 8000a6e:	0002      	movs	r2, r0
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <main+0x64c>)
 8000a72:	601a      	str	r2, [r3, #0]
        tercer_digito_display = get_key_from_number(c_value);
 8000a74:	21a0      	movs	r1, #160	; 0xa0
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fcde 	bl	800043c <get_key_from_number>
 8000a80:	0002      	movs	r2, r0
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <main+0x650>)
 8000a84:	601a      	str	r2, [r3, #0]

        // Muestra el resultado final de la multiplicación
        char result_msg[50];
        sprintf(result_msg, "Resultado de la multiplicación: %d", product_value);
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	490f      	ldr	r1, [pc, #60]	; (8000ac8 <main+0x664>)
 8000a8c:	2438      	movs	r4, #56	; 0x38
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fa85 	bl	8000fa0 <siprintf>
        USART2_putstring_E((uint8_t *)result_msg);
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fa05 	bl	8000ea8 <USART2_putstring_E>

        // Resetea el valor almacenado después de la operación
        valor_almacenado = 0;
 8000a9e:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <main+0x644>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	e0d9      	b.n	8000c5a <main+0x7f6>
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000078 	.word	0x20000078
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	08001924 	.word	0x08001924
 8000abc:	000003e7 	.word	0x000003e7
 8000ac0:	08001938 	.word	0x08001938
 8000ac4:	08001954 	.word	0x08001954
 8000ac8:	0800196c 	.word	0x0800196c
    }
}

                    else if (key_number == TECLA_F) {
 8000acc:	23c0      	movs	r3, #192	; 0xc0
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b0e      	cmp	r3, #14
 8000ad4:	d000      	beq.n	8000ad8 <main+0x674>
 8000ad6:	e09d      	b.n	8000c14 <main+0x7b0>
                        // Verifica si valor_almacenado y el nuevo valor no son cero para evitar división por cero
                        int div_value = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	24bc      	movs	r4, #188	; 0xbc
 8000adc:	193a      	adds	r2, r7, r4
 8000ade:	6013      	str	r3, [r2, #0]
                        int u_value = get_number_from_key(primer_digito);
 8000ae0:	4b7d      	ldr	r3, [pc, #500]	; (8000cd8 <main+0x874>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fc8f 	bl	8000408 <get_number_from_key>
 8000aea:	0003      	movs	r3, r0
 8000aec:	25b8      	movs	r5, #184	; 0xb8
 8000aee:	197a      	adds	r2, r7, r5
 8000af0:	6013      	str	r3, [r2, #0]
                        int d_value = get_number_from_key(segundo_digito_display);
 8000af2:	4b7a      	ldr	r3, [pc, #488]	; (8000cdc <main+0x878>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff fc86 	bl	8000408 <get_number_from_key>
 8000afc:	0003      	movs	r3, r0
 8000afe:	26b4      	movs	r6, #180	; 0xb4
 8000b00:	19ba      	adds	r2, r7, r6
 8000b02:	6013      	str	r3, [r2, #0]
                        int c_value = get_number_from_key(tercer_digito_display);
 8000b04:	4b76      	ldr	r3, [pc, #472]	; (8000ce0 <main+0x87c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fc7d 	bl	8000408 <get_number_from_key>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	21b0      	movs	r1, #176	; 0xb0
 8000b12:	187a      	adds	r2, r7, r1
 8000b14:	6013      	str	r3, [r2, #0]

                        div_value = u_value + (d_value * 10) + (c_value * 100);
 8000b16:	19bb      	adds	r3, r7, r6
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	001a      	movs	r2, r3
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	18d2      	adds	r2, r2, r3
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2164      	movs	r1, #100	; 0x64
 8000b30:	434b      	muls	r3, r1
 8000b32:	18d3      	adds	r3, r2, r3
 8000b34:	193a      	adds	r2, r7, r4
 8000b36:	6013      	str	r3, [r2, #0]

                        char info_msg[50];
                        sprintf(info_msg, "Diviendo: %d dentro de %d", valor_almacenado, div_value);
 8000b38:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <main+0x880>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4969      	ldr	r1, [pc, #420]	; (8000ce8 <main+0x884>)
 8000b42:	1d38      	adds	r0, r7, #4
 8000b44:	f000 fa2c 	bl	8000fa0 <siprintf>
                        USART2_putstring_E((uint8_t *)info_msg);
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f9ac 	bl	8000ea8 <USART2_putstring_E>

                        if (valor_almacenado != 0 && div_value != 0) {
 8000b50:	4b64      	ldr	r3, [pc, #400]	; (8000ce4 <main+0x880>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d04d      	beq.n	8000bf4 <main+0x790>
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d049      	beq.n	8000bf4 <main+0x790>
                            valor_almacenado = (uint32_t)(valor_almacenado / div_value);
 8000b60:	4b60      	ldr	r3, [pc, #384]	; (8000ce4 <main+0x880>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	193a      	adds	r2, r7, r4
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fad6 	bl	800011c <__udivsi3>
 8000b70:	0003      	movs	r3, r0
 8000b72:	001a      	movs	r2, r3
 8000b74:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <main+0x880>)
 8000b76:	601a      	str	r2, [r3, #0]

                            u_value = valor_almacenado % 10;
 8000b78:	4b5a      	ldr	r3, [pc, #360]	; (8000ce4 <main+0x880>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	210a      	movs	r1, #10
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fb52 	bl	8000228 <__aeabi_uidivmod>
 8000b84:	000b      	movs	r3, r1
 8000b86:	197a      	adds	r2, r7, r5
 8000b88:	6013      	str	r3, [r2, #0]
                            d_value = (valor_almacenado / 10) % 10;
 8000b8a:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <main+0x880>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	210a      	movs	r1, #10
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fac3 	bl	800011c <__udivsi3>
 8000b96:	0003      	movs	r3, r0
 8000b98:	210a      	movs	r1, #10
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fb44 	bl	8000228 <__aeabi_uidivmod>
 8000ba0:	000b      	movs	r3, r1
 8000ba2:	19ba      	adds	r2, r7, r6
 8000ba4:	6013      	str	r3, [r2, #0]
                            c_value = (valor_almacenado / 100) % 10;
 8000ba6:	4b4f      	ldr	r3, [pc, #316]	; (8000ce4 <main+0x880>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2164      	movs	r1, #100	; 0x64
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fab5 	bl	800011c <__udivsi3>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	210a      	movs	r1, #10
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff fb36 	bl	8000228 <__aeabi_uidivmod>
 8000bbc:	000b      	movs	r3, r1
 8000bbe:	24b0      	movs	r4, #176	; 0xb0
 8000bc0:	193a      	adds	r2, r7, r4
 8000bc2:	6013      	str	r3, [r2, #0]

                            primer_digito = get_key_from_number(u_value);
 8000bc4:	197b      	adds	r3, r7, r5
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff fc37 	bl	800043c <get_key_from_number>
 8000bce:	0002      	movs	r2, r0
 8000bd0:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <main+0x874>)
 8000bd2:	601a      	str	r2, [r3, #0]
                            segundo_digito_display = get_key_from_number(d_value);
 8000bd4:	19bb      	adds	r3, r7, r6
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fc2f 	bl	800043c <get_key_from_number>
 8000bde:	0002      	movs	r2, r0
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <main+0x878>)
 8000be2:	601a      	str	r2, [r3, #0]
                            tercer_digito_display = get_key_from_number(c_value);
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fc27 	bl	800043c <get_key_from_number>
 8000bee:	0002      	movs	r2, r0
 8000bf0:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <main+0x87c>)
 8000bf2:	601a      	str	r2, [r3, #0]
                        }

                        char result_msg[50];
                        sprintf(result_msg, "Resultado de la división: %d", valor_almacenado);
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <main+0x880>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	493c      	ldr	r1, [pc, #240]	; (8000cec <main+0x888>)
 8000bfa:	2438      	movs	r4, #56	; 0x38
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 f9ce 	bl	8000fa0 <siprintf>
                        USART2_putstring_E((uint8_t *)result_msg);
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f94e 	bl	8000ea8 <USART2_putstring_E>

                        valor_almacenado = 0; // Reset valor_almacenado para evitar acumulación de resultados
 8000c0c:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <main+0x880>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e022      	b.n	8000c5a <main+0x7f6>
                    }
                    else if (key_number == 12) { // Assuming 12 is the index for the "E" or "*" button
 8000c14:	23c0      	movs	r3, #192	; 0xc0
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b0c      	cmp	r3, #12
 8000c1c:	d110      	bne.n	8000c40 <main+0x7dc>
    // Reset the display values and any relevant state variables
    primer_digito = 0xFF;
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <main+0x874>)
 8000c20:	22ff      	movs	r2, #255	; 0xff
 8000c22:	601a      	str	r2, [r3, #0]
    segundo_digito_display = 0xFF;
 8000c24:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <main+0x878>)
 8000c26:	22ff      	movs	r2, #255	; 0xff
 8000c28:	601a      	str	r2, [r3, #0]
    tercer_digito_display = 0xFF;
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <main+0x87c>)
 8000c2c:	22ff      	movs	r2, #255	; 0xff
 8000c2e:	601a      	str	r2, [r3, #0]
    char result_msg[50];
    USART2_putstring_E("Digitos borrados"); 
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <main+0x88c>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 f938 	bl	8000ea8 <USART2_putstring_E>
    valor_almacenado = 0; // Reset the stored value
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <main+0x880>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e00c      	b.n	8000c5a <main+0x7f6>



                    else
                    {
                    	tercer_digito_display = segundo_digito_display;
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <main+0x878>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <main+0x87c>)
 8000c46:	601a      	str	r2, [r3, #0]
                        // Actualiza el segundo display con el valor del primer display
                        segundo_digito_display = primer_digito;
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <main+0x874>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <main+0x878>)
 8000c4e:	601a      	str	r2, [r3, #0]
                        // Actualiza el primer display con el nuevo dígito
                        primer_digito = key_number;
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <main+0x874>)
 8000c52:	22c0      	movs	r2, #192	; 0xc0
 8000c54:	18ba      	adds	r2, r7, r2
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	601a      	str	r2, [r3, #0]
                    }

                    while (!(GPIOB->IDR & (1 << (row + 8)))); // Espera a que la tecla se suelte
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <main+0x890>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	22d0      	movs	r2, #208	; 0xd0
 8000c62:	18ba      	adds	r2, r7, r2
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	3208      	adds	r2, #8
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4091      	lsls	r1, r2
 8000c6c:	000a      	movs	r2, r1
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d0f4      	beq.n	8000c5c <main+0x7f8>
                    break; // Sale del bucle de filas para evitar múltiples lecturas
 8000c72:	e00b      	b.n	8000c8c <main+0x828>
           for (int row = 0; row < 4; row++)
 8000c74:	22d0      	movs	r2, #208	; 0xd0
 8000c76:	18bb      	adds	r3, r7, r2
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	18ba      	adds	r2, r7, r2
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	23d0      	movs	r3, #208	; 0xd0
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	dc00      	bgt.n	8000c8c <main+0x828>
 8000c8a:	e4a7      	b.n	80005dc <main+0x178>
                }
            }
            GPIOB->ODR |= (1 << (12 + col)); // Desactiva la columna actual antes de continuar
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <main+0x890>)
 8000c8e:	695a      	ldr	r2, [r3, #20]
 8000c90:	20d4      	movs	r0, #212	; 0xd4
 8000c92:	183b      	adds	r3, r7, r0
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	330c      	adds	r3, #12
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4099      	lsls	r1, r3
 8000c9c:	000b      	movs	r3, r1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <main+0x890>)
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	615a      	str	r2, [r3, #20]
        for (int col = 0; col < 4; col++)
 8000ca6:	183b      	adds	r3, r7, r0
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	183a      	adds	r2, r7, r0
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	23d4      	movs	r3, #212	; 0xd4
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	dc00      	bgt.n	8000cbc <main+0x858>
 8000cba:	e46d      	b.n	8000598 <main+0x134>
        }

        // Actualizar los valores de los displays
        actualizar_valores_display();
 8000cbc:	f000 f838 	bl	8000d30 <actualizar_valores_display>
        valor_almacenado = valor_almacenado %1000;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <main+0x880>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	22fa      	movs	r2, #250	; 0xfa
 8000cc6:	0091      	lsls	r1, r2, #2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff faad 	bl	8000228 <__aeabi_uidivmod>
 8000cce:	000b      	movs	r3, r1
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <main+0x880>)
 8000cd4:	601a      	str	r2, [r3, #0]
        for (int col = 0; col < 4; col++)
 8000cd6:	e45a      	b.n	800058e <main+0x12a>
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000004 	.word	0x20000004
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000078 	.word	0x20000078
 8000ce8:	08001990 	.word	0x08001990
 8000cec:	080019ac 	.word	0x080019ac
 8000cf0:	080019cc 	.word	0x080019cc
 8000cf4:	50000400 	.word	0x50000400

08000cf8 <delay_ms>:

}



void delay_ms(uint16_t n) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	0002      	movs	r2, r0
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < n * 10; i++) {
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e003      	b.n	8000d12 <delay_ms+0x1a>
        __asm__("NOP");
 8000d0a:	46c0      	nop			; (mov r8, r8)
    for (uint32_t i = 0; i < n * 10; i++) {
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	1dbb      	adds	r3, r7, #6
 8000d14:	881a      	ldrh	r2, [r3, #0]
 8000d16:	0013      	movs	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	001a      	movs	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d3f1      	bcc.n	8000d0a <delay_ms+0x12>
    }
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <actualizar_valores_display>:


void actualizar_valores_display(void) {
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	af00      	add	r7, sp, #0

    // Asumiendo que el cuarto dígito se activa con un pin específico, por ejemplo GPIOC->BSRR = 1 << 7 para activarlo
    // Asumiendo que el cuarto dígito se activa con un pin específico, aquí PC9

    if (tercer_digito_display != 0xFF) {
 8000d34:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <actualizar_valores_display+0xc0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2bff      	cmp	r3, #255	; 0xff
 8000d3a:	d01a      	beq.n	8000d72 <actualizar_valores_display+0x42>
            GPIOC->BSRR = 1 << (6 + 16); // Apaga el segundo dígito
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	03d2      	lsls	r2, r2, #15
 8000d42:	619a      	str	r2, [r3, #24]
            GPIOC->BSRR = 1 << (5 + 16); // Apaga el primer dígito
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	0392      	lsls	r2, r2, #14
 8000d4a:	619a      	str	r2, [r3, #24]
            GPIOC->BSRR = 1 << 8; // Enciende el tercer dígito
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	0052      	lsls	r2, r2, #1
 8000d52:	619a      	str	r2, [r3, #24]
            GPIOB->BSRR = 0xFF << 16; // Apaga todos los segmentos
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <actualizar_valores_display+0xc8>)
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	0412      	lsls	r2, r2, #16
 8000d5a:	619a      	str	r2, [r3, #24]
            GPIOB->BSRR = decodificador(tercer_digito_display); // Muestra el tercer dígito
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <actualizar_valores_display+0xc0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4c25      	ldr	r4, [pc, #148]	; (8000df8 <actualizar_valores_display+0xc8>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 f84e 	bl	8000e04 <decodificador>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	61a3      	str	r3, [r4, #24]
            delay_ms(5); // Retardo para la visualización
 8000d6c:	2005      	movs	r0, #5
 8000d6e:	f7ff ffc3 	bl	8000cf8 <delay_ms>
    }
    // Multiplexación para mostrar los números en los displays
    if (segundo_digito_display != 0xFF) {
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <actualizar_valores_display+0xcc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d019      	beq.n	8000dae <actualizar_valores_display+0x7e>
    	GPIOC->BSRR = 1 << (8 + 16); // Apaga el tercer dígito
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	0452      	lsls	r2, r2, #17
 8000d80:	619a      	str	r2, [r3, #24]
        GPIOC->BSRR = 1 << (5 + 16); // Apaga el primer dígito
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	0392      	lsls	r2, r2, #14
 8000d88:	619a      	str	r2, [r3, #24]
        GPIOC->BSRR = 1 << 6; // Enciende el segundo dígito
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	619a      	str	r2, [r3, #24]
        GPIOB->BSRR = 0xFF << 16; // Apaga todos los segmentos
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <actualizar_valores_display+0xc8>)
 8000d92:	22ff      	movs	r2, #255	; 0xff
 8000d94:	0412      	lsls	r2, r2, #16
 8000d96:	619a      	str	r2, [r3, #24]
        GPIOB->BSRR = decodificador(segundo_digito_display); // Muestra el segundo dígito
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <actualizar_valores_display+0xcc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4c16      	ldr	r4, [pc, #88]	; (8000df8 <actualizar_valores_display+0xc8>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 f830 	bl	8000e04 <decodificador>
 8000da4:	0003      	movs	r3, r0
 8000da6:	61a3      	str	r3, [r4, #24]
        delay_ms(5); // Retardo para la visualización
 8000da8:	2005      	movs	r0, #5
 8000daa:	f7ff ffa5 	bl	8000cf8 <delay_ms>
    }

    if (primer_digito != 0xFF) {
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <actualizar_valores_display+0xd0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d019      	beq.n	8000dea <actualizar_valores_display+0xba>
    	GPIOC->BSRR = 1 << (8 + 16); // Apaga el tercer dígito
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	0452      	lsls	r2, r2, #17
 8000dbc:	619a      	str	r2, [r3, #24]
        GPIOC->BSRR = 1 << (6 + 16); // Apaga el segundo dígito
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	03d2      	lsls	r2, r2, #15
 8000dc4:	619a      	str	r2, [r3, #24]
        GPIOC->BSRR = 1 << 5; // Enciende el primer dígito
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <actualizar_valores_display+0xc4>)
 8000dc8:	2220      	movs	r2, #32
 8000dca:	619a      	str	r2, [r3, #24]
        GPIOB->BSRR = 0xFF << 16; // Apaga todos los segmentos
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <actualizar_valores_display+0xc8>)
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	0412      	lsls	r2, r2, #16
 8000dd2:	619a      	str	r2, [r3, #24]
        GPIOB->BSRR = decodificador(primer_digito); // Muestra el primer dígito
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <actualizar_valores_display+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4c07      	ldr	r4, [pc, #28]	; (8000df8 <actualizar_valores_display+0xc8>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 f812 	bl	8000e04 <decodificador>
 8000de0:	0003      	movs	r3, r0
 8000de2:	61a3      	str	r3, [r4, #24]
        delay_ms(5); // Retardo para la visualización
 8000de4:	2005      	movs	r0, #5
 8000de6:	f7ff ff87 	bl	8000cf8 <delay_ms>
    }

}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bdb0      	pop	{r4, r5, r7, pc}
 8000df0:	20000008 	.word	0x20000008
 8000df4:	50000800 	.word	0x50000800
 8000df8:	50000400 	.word	0x50000400
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	20000000 	.word	0x20000000

08000e04 <decodificador>:

uint32_t decodificador(uint32_t number) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	uint32_t key = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
	switch (number){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b0d      	cmp	r3, #13
 8000e14:	d823      	bhi.n	8000e5e <decodificador+0x5a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <decodificador+0x70>)
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	469f      	mov	pc, r3
		case 0: key = 0; break;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e01c      	b.n	8000e62 <decodificador+0x5e>
		case 1: key = 1; break;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e019      	b.n	8000e62 <decodificador+0x5e>
		case 2: key = 2; break;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	e016      	b.n	8000e62 <decodificador+0x5e>
		case 4: key = 4; break;
 8000e34:	2304      	movs	r3, #4
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	e013      	b.n	8000e62 <decodificador+0x5e>
		case 5: key = 5; break;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	e010      	b.n	8000e62 <decodificador+0x5e>
		case 6: key = 6; break;
 8000e40:	2306      	movs	r3, #6
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e00d      	b.n	8000e62 <decodificador+0x5e>
		case 8: key = 8; break;
 8000e46:	2308      	movs	r3, #8
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	e00a      	b.n	8000e62 <decodificador+0x5e>
		case 9: key = 9; break;
 8000e4c:	2309      	movs	r3, #9
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e007      	b.n	8000e62 <decodificador+0x5e>
		case 10: key = 10; break;
 8000e52:	230a      	movs	r3, #10
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e004      	b.n	8000e62 <decodificador+0x5e>
		case 13: key = 13; break;
 8000e58:	230d      	movs	r3, #13
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e001      	b.n	8000e62 <decodificador+0x5e>
		default: return 13;
 8000e5e:	230d      	movs	r3, #13
 8000e60:	e003      	b.n	8000e6a <decodificador+0x66>
	}
	return tecla_a_mostrar[key];
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <decodificador+0x74>)
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	58d3      	ldr	r3, [r2, r3]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	08001a20 	.word	0x08001a20
 8000e78:	080019e0 	.word	0x080019e0

08000e7c <USART2_write>:
	while(!(USART2->ISR & 0x0020)){}
	return USART2->RDR;
}

void USART2_write(uint8_t ch)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	0002      	movs	r2, r0
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	701a      	strb	r2, [r3, #0]
	while(!(USART2->ISR & 0x0080)){}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <USART2_write+0x28>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	4013      	ands	r3, r2
 8000e92:	d0fa      	beq.n	8000e8a <USART2_write+0xe>
	USART2->TDR = ch;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <USART2_write+0x28>)
 8000e96:	1dfa      	adds	r2, r7, #7
 8000e98:	7812      	ldrb	r2, [r2, #0]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <USART2_putstring_E>:
		StringPtr++;
	}
}

void USART2_putstring_E(uint8_t* StringPtr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	while(*StringPtr != 0x00)
 8000eb0:	e007      	b.n	8000ec2 <USART2_putstring_E+0x1a>
	{
		USART2_write(*StringPtr);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff ffe0 	bl	8000e7c <USART2_write>
		StringPtr++;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
	while(*StringPtr != 0x00)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f3      	bne.n	8000eb2 <USART2_putstring_E+0xa>
	}
	USART2_write(0x0D);//CR
 8000eca:	200d      	movs	r0, #13
 8000ecc:	f7ff ffd6 	bl	8000e7c <USART2_write>
	USART2_write(0x0A);//NL
 8000ed0:	200a      	movs	r0, #10
 8000ed2:	f7ff ffd3 	bl	8000e7c <USART2_write>
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	18d3      	adds	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f000 f866 	bl	8000fe0 <__errno>
 8000f14:	0003      	movs	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	18d2      	adds	r2, r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b006      	add	sp, #24
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20002000 	.word	0x20002000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	2000007c 	.word	0x2000007c
 8000f48:	200001c8 	.word	0x200001c8

08000f4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f50:	e000      	b.n	8000f54 <Reset_Handler+0x8>
 8000f52:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f7a:	f000 f837 	bl	8000fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7e:	f7ff fa71 	bl	8000464 <main>

08000f82 <LoopForever>:

LoopForever:
  b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   r0, =_estack
 8000f84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f90:	08001ab0 	.word	0x08001ab0
  ldr r2, =_sbss
 8000f94:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f98:	200001c8 	.word	0x200001c8

08000f9c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_COMP_IRQHandler>
	...

08000fa0 <siprintf>:
 8000fa0:	b40e      	push	{r1, r2, r3}
 8000fa2:	b500      	push	{lr}
 8000fa4:	490b      	ldr	r1, [pc, #44]	; (8000fd4 <siprintf+0x34>)
 8000fa6:	b09c      	sub	sp, #112	; 0x70
 8000fa8:	ab1d      	add	r3, sp, #116	; 0x74
 8000faa:	9002      	str	r0, [sp, #8]
 8000fac:	9006      	str	r0, [sp, #24]
 8000fae:	9107      	str	r1, [sp, #28]
 8000fb0:	9104      	str	r1, [sp, #16]
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <siprintf+0x38>)
 8000fb4:	4909      	ldr	r1, [pc, #36]	; (8000fdc <siprintf+0x3c>)
 8000fb6:	cb04      	ldmia	r3!, {r2}
 8000fb8:	9105      	str	r1, [sp, #20]
 8000fba:	6800      	ldr	r0, [r0, #0]
 8000fbc:	a902      	add	r1, sp, #8
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	f000 f99a 	bl	80012f8 <_svfiprintf_r>
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	9b02      	ldr	r3, [sp, #8]
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	b01c      	add	sp, #112	; 0x70
 8000fcc:	bc08      	pop	{r3}
 8000fce:	b003      	add	sp, #12
 8000fd0:	4718      	bx	r3
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	7fffffff 	.word	0x7fffffff
 8000fd8:	20000058 	.word	0x20000058
 8000fdc:	ffff0208 	.word	0xffff0208

08000fe0 <__errno>:
 8000fe0:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <__errno+0x8>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	4770      	bx	lr
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	20000058 	.word	0x20000058

08000fec <__libc_init_array>:
 8000fec:	b570      	push	{r4, r5, r6, lr}
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4c0c      	ldr	r4, [pc, #48]	; (8001024 <__libc_init_array+0x38>)
 8000ff2:	4d0d      	ldr	r5, [pc, #52]	; (8001028 <__libc_init_array+0x3c>)
 8000ff4:	1b64      	subs	r4, r4, r5
 8000ff6:	10a4      	asrs	r4, r4, #2
 8000ff8:	42a6      	cmp	r6, r4
 8000ffa:	d109      	bne.n	8001010 <__libc_init_array+0x24>
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	f000 fc6d 	bl	80018dc <_init>
 8001002:	4c0a      	ldr	r4, [pc, #40]	; (800102c <__libc_init_array+0x40>)
 8001004:	4d0a      	ldr	r5, [pc, #40]	; (8001030 <__libc_init_array+0x44>)
 8001006:	1b64      	subs	r4, r4, r5
 8001008:	10a4      	asrs	r4, r4, #2
 800100a:	42a6      	cmp	r6, r4
 800100c:	d105      	bne.n	800101a <__libc_init_array+0x2e>
 800100e:	bd70      	pop	{r4, r5, r6, pc}
 8001010:	00b3      	lsls	r3, r6, #2
 8001012:	58eb      	ldr	r3, [r5, r3]
 8001014:	4798      	blx	r3
 8001016:	3601      	adds	r6, #1
 8001018:	e7ee      	b.n	8000ff8 <__libc_init_array+0xc>
 800101a:	00b3      	lsls	r3, r6, #2
 800101c:	58eb      	ldr	r3, [r5, r3]
 800101e:	4798      	blx	r3
 8001020:	3601      	adds	r6, #1
 8001022:	e7f2      	b.n	800100a <__libc_init_array+0x1e>
 8001024:	08001aa8 	.word	0x08001aa8
 8001028:	08001aa8 	.word	0x08001aa8
 800102c:	08001aac 	.word	0x08001aac
 8001030:	08001aa8 	.word	0x08001aa8

08001034 <__retarget_lock_acquire_recursive>:
 8001034:	4770      	bx	lr

08001036 <__retarget_lock_release_recursive>:
 8001036:	4770      	bx	lr

08001038 <_free_r>:
 8001038:	b570      	push	{r4, r5, r6, lr}
 800103a:	0005      	movs	r5, r0
 800103c:	2900      	cmp	r1, #0
 800103e:	d010      	beq.n	8001062 <_free_r+0x2a>
 8001040:	1f0c      	subs	r4, r1, #4
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	da00      	bge.n	800104a <_free_r+0x12>
 8001048:	18e4      	adds	r4, r4, r3
 800104a:	0028      	movs	r0, r5
 800104c:	f000 f8e2 	bl	8001214 <__malloc_lock>
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <_free_r+0x90>)
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <_free_r+0x2c>
 8001058:	6063      	str	r3, [r4, #4]
 800105a:	6014      	str	r4, [r2, #0]
 800105c:	0028      	movs	r0, r5
 800105e:	f000 f8e1 	bl	8001224 <__malloc_unlock>
 8001062:	bd70      	pop	{r4, r5, r6, pc}
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <_free_r+0x42>
 8001068:	6820      	ldr	r0, [r4, #0]
 800106a:	1821      	adds	r1, r4, r0
 800106c:	428b      	cmp	r3, r1
 800106e:	d1f3      	bne.n	8001058 <_free_r+0x20>
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	1809      	adds	r1, r1, r0
 8001076:	6021      	str	r1, [r4, #0]
 8001078:	e7ee      	b.n	8001058 <_free_r+0x20>
 800107a:	001a      	movs	r2, r3
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <_free_r+0x4e>
 8001082:	42a3      	cmp	r3, r4
 8001084:	d9f9      	bls.n	800107a <_free_r+0x42>
 8001086:	6811      	ldr	r1, [r2, #0]
 8001088:	1850      	adds	r0, r2, r1
 800108a:	42a0      	cmp	r0, r4
 800108c:	d10b      	bne.n	80010a6 <_free_r+0x6e>
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	1809      	adds	r1, r1, r0
 8001092:	1850      	adds	r0, r2, r1
 8001094:	6011      	str	r1, [r2, #0]
 8001096:	4283      	cmp	r3, r0
 8001098:	d1e0      	bne.n	800105c <_free_r+0x24>
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	1841      	adds	r1, r0, r1
 80010a0:	6011      	str	r1, [r2, #0]
 80010a2:	6053      	str	r3, [r2, #4]
 80010a4:	e7da      	b.n	800105c <_free_r+0x24>
 80010a6:	42a0      	cmp	r0, r4
 80010a8:	d902      	bls.n	80010b0 <_free_r+0x78>
 80010aa:	230c      	movs	r3, #12
 80010ac:	602b      	str	r3, [r5, #0]
 80010ae:	e7d5      	b.n	800105c <_free_r+0x24>
 80010b0:	6820      	ldr	r0, [r4, #0]
 80010b2:	1821      	adds	r1, r4, r0
 80010b4:	428b      	cmp	r3, r1
 80010b6:	d103      	bne.n	80010c0 <_free_r+0x88>
 80010b8:	6819      	ldr	r1, [r3, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	1809      	adds	r1, r1, r0
 80010be:	6021      	str	r1, [r4, #0]
 80010c0:	6063      	str	r3, [r4, #4]
 80010c2:	6054      	str	r4, [r2, #4]
 80010c4:	e7ca      	b.n	800105c <_free_r+0x24>
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	200001c0 	.word	0x200001c0

080010cc <sbrk_aligned>:
 80010cc:	b570      	push	{r4, r5, r6, lr}
 80010ce:	4e0f      	ldr	r6, [pc, #60]	; (800110c <sbrk_aligned+0x40>)
 80010d0:	000d      	movs	r5, r1
 80010d2:	6831      	ldr	r1, [r6, #0]
 80010d4:	0004      	movs	r4, r0
 80010d6:	2900      	cmp	r1, #0
 80010d8:	d102      	bne.n	80010e0 <sbrk_aligned+0x14>
 80010da:	f000 fba1 	bl	8001820 <_sbrk_r>
 80010de:	6030      	str	r0, [r6, #0]
 80010e0:	0029      	movs	r1, r5
 80010e2:	0020      	movs	r0, r4
 80010e4:	f000 fb9c 	bl	8001820 <_sbrk_r>
 80010e8:	1c43      	adds	r3, r0, #1
 80010ea:	d00a      	beq.n	8001102 <sbrk_aligned+0x36>
 80010ec:	2303      	movs	r3, #3
 80010ee:	1cc5      	adds	r5, r0, #3
 80010f0:	439d      	bics	r5, r3
 80010f2:	42a8      	cmp	r0, r5
 80010f4:	d007      	beq.n	8001106 <sbrk_aligned+0x3a>
 80010f6:	1a29      	subs	r1, r5, r0
 80010f8:	0020      	movs	r0, r4
 80010fa:	f000 fb91 	bl	8001820 <_sbrk_r>
 80010fe:	3001      	adds	r0, #1
 8001100:	d101      	bne.n	8001106 <sbrk_aligned+0x3a>
 8001102:	2501      	movs	r5, #1
 8001104:	426d      	negs	r5, r5
 8001106:	0028      	movs	r0, r5
 8001108:	bd70      	pop	{r4, r5, r6, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	200001c4 	.word	0x200001c4

08001110 <_malloc_r>:
 8001110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001112:	2203      	movs	r2, #3
 8001114:	1ccb      	adds	r3, r1, #3
 8001116:	4393      	bics	r3, r2
 8001118:	3308      	adds	r3, #8
 800111a:	0006      	movs	r6, r0
 800111c:	001f      	movs	r7, r3
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d238      	bcs.n	8001194 <_malloc_r+0x84>
 8001122:	270c      	movs	r7, #12
 8001124:	42b9      	cmp	r1, r7
 8001126:	d837      	bhi.n	8001198 <_malloc_r+0x88>
 8001128:	0030      	movs	r0, r6
 800112a:	f000 f873 	bl	8001214 <__malloc_lock>
 800112e:	4b38      	ldr	r3, [pc, #224]	; (8001210 <_malloc_r+0x100>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	001c      	movs	r4, r3
 8001136:	2c00      	cmp	r4, #0
 8001138:	d133      	bne.n	80011a2 <_malloc_r+0x92>
 800113a:	0039      	movs	r1, r7
 800113c:	0030      	movs	r0, r6
 800113e:	f7ff ffc5 	bl	80010cc <sbrk_aligned>
 8001142:	0004      	movs	r4, r0
 8001144:	1c43      	adds	r3, r0, #1
 8001146:	d15e      	bne.n	8001206 <_malloc_r+0xf6>
 8001148:	9b00      	ldr	r3, [sp, #0]
 800114a:	681c      	ldr	r4, [r3, #0]
 800114c:	0025      	movs	r5, r4
 800114e:	2d00      	cmp	r5, #0
 8001150:	d14e      	bne.n	80011f0 <_malloc_r+0xe0>
 8001152:	2c00      	cmp	r4, #0
 8001154:	d051      	beq.n	80011fa <_malloc_r+0xea>
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	0029      	movs	r1, r5
 800115a:	18e3      	adds	r3, r4, r3
 800115c:	0030      	movs	r0, r6
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f000 fb5e 	bl	8001820 <_sbrk_r>
 8001164:	9b01      	ldr	r3, [sp, #4]
 8001166:	4283      	cmp	r3, r0
 8001168:	d147      	bne.n	80011fa <_malloc_r+0xea>
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	0030      	movs	r0, r6
 800116e:	1aff      	subs	r7, r7, r3
 8001170:	0039      	movs	r1, r7
 8001172:	f7ff ffab 	bl	80010cc <sbrk_aligned>
 8001176:	3001      	adds	r0, #1
 8001178:	d03f      	beq.n	80011fa <_malloc_r+0xea>
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	19db      	adds	r3, r3, r7
 800117e:	6023      	str	r3, [r4, #0]
 8001180:	9b00      	ldr	r3, [sp, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d040      	beq.n	800120a <_malloc_r+0xfa>
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	42a2      	cmp	r2, r4
 800118c:	d133      	bne.n	80011f6 <_malloc_r+0xe6>
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	e014      	b.n	80011be <_malloc_r+0xae>
 8001194:	2b00      	cmp	r3, #0
 8001196:	dac5      	bge.n	8001124 <_malloc_r+0x14>
 8001198:	230c      	movs	r3, #12
 800119a:	2500      	movs	r5, #0
 800119c:	6033      	str	r3, [r6, #0]
 800119e:	0028      	movs	r0, r5
 80011a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80011a2:	6821      	ldr	r1, [r4, #0]
 80011a4:	1bc9      	subs	r1, r1, r7
 80011a6:	d420      	bmi.n	80011ea <_malloc_r+0xda>
 80011a8:	290b      	cmp	r1, #11
 80011aa:	d918      	bls.n	80011de <_malloc_r+0xce>
 80011ac:	19e2      	adds	r2, r4, r7
 80011ae:	6027      	str	r7, [r4, #0]
 80011b0:	42a3      	cmp	r3, r4
 80011b2:	d112      	bne.n	80011da <_malloc_r+0xca>
 80011b4:	9b00      	ldr	r3, [sp, #0]
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	6863      	ldr	r3, [r4, #4]
 80011ba:	6011      	str	r1, [r2, #0]
 80011bc:	6053      	str	r3, [r2, #4]
 80011be:	0030      	movs	r0, r6
 80011c0:	0025      	movs	r5, r4
 80011c2:	f000 f82f 	bl	8001224 <__malloc_unlock>
 80011c6:	2207      	movs	r2, #7
 80011c8:	350b      	adds	r5, #11
 80011ca:	1d23      	adds	r3, r4, #4
 80011cc:	4395      	bics	r5, r2
 80011ce:	1aea      	subs	r2, r5, r3
 80011d0:	429d      	cmp	r5, r3
 80011d2:	d0e4      	beq.n	800119e <_malloc_r+0x8e>
 80011d4:	1b5b      	subs	r3, r3, r5
 80011d6:	50a3      	str	r3, [r4, r2]
 80011d8:	e7e1      	b.n	800119e <_malloc_r+0x8e>
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	e7ec      	b.n	80011b8 <_malloc_r+0xa8>
 80011de:	6862      	ldr	r2, [r4, #4]
 80011e0:	42a3      	cmp	r3, r4
 80011e2:	d1d5      	bne.n	8001190 <_malloc_r+0x80>
 80011e4:	9b00      	ldr	r3, [sp, #0]
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e7e9      	b.n	80011be <_malloc_r+0xae>
 80011ea:	0023      	movs	r3, r4
 80011ec:	6864      	ldr	r4, [r4, #4]
 80011ee:	e7a2      	b.n	8001136 <_malloc_r+0x26>
 80011f0:	002c      	movs	r4, r5
 80011f2:	686d      	ldr	r5, [r5, #4]
 80011f4:	e7ab      	b.n	800114e <_malloc_r+0x3e>
 80011f6:	0013      	movs	r3, r2
 80011f8:	e7c4      	b.n	8001184 <_malloc_r+0x74>
 80011fa:	230c      	movs	r3, #12
 80011fc:	0030      	movs	r0, r6
 80011fe:	6033      	str	r3, [r6, #0]
 8001200:	f000 f810 	bl	8001224 <__malloc_unlock>
 8001204:	e7cb      	b.n	800119e <_malloc_r+0x8e>
 8001206:	6027      	str	r7, [r4, #0]
 8001208:	e7d9      	b.n	80011be <_malloc_r+0xae>
 800120a:	605b      	str	r3, [r3, #4]
 800120c:	deff      	udf	#255	; 0xff
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200001c0 	.word	0x200001c0

08001214 <__malloc_lock>:
 8001214:	b510      	push	{r4, lr}
 8001216:	4802      	ldr	r0, [pc, #8]	; (8001220 <__malloc_lock+0xc>)
 8001218:	f7ff ff0c 	bl	8001034 <__retarget_lock_acquire_recursive>
 800121c:	bd10      	pop	{r4, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	200001bc 	.word	0x200001bc

08001224 <__malloc_unlock>:
 8001224:	b510      	push	{r4, lr}
 8001226:	4802      	ldr	r0, [pc, #8]	; (8001230 <__malloc_unlock+0xc>)
 8001228:	f7ff ff05 	bl	8001036 <__retarget_lock_release_recursive>
 800122c:	bd10      	pop	{r4, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	200001bc 	.word	0x200001bc

08001234 <__ssputs_r>:
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	9203      	str	r2, [sp, #12]
 800123c:	688e      	ldr	r6, [r1, #8]
 800123e:	9a01      	ldr	r2, [sp, #4]
 8001240:	0007      	movs	r7, r0
 8001242:	000c      	movs	r4, r1
 8001244:	680b      	ldr	r3, [r1, #0]
 8001246:	4296      	cmp	r6, r2
 8001248:	d831      	bhi.n	80012ae <__ssputs_r+0x7a>
 800124a:	898a      	ldrh	r2, [r1, #12]
 800124c:	2190      	movs	r1, #144	; 0x90
 800124e:	00c9      	lsls	r1, r1, #3
 8001250:	420a      	tst	r2, r1
 8001252:	d029      	beq.n	80012a8 <__ssputs_r+0x74>
 8001254:	2003      	movs	r0, #3
 8001256:	6921      	ldr	r1, [r4, #16]
 8001258:	1a5b      	subs	r3, r3, r1
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	6963      	ldr	r3, [r4, #20]
 800125e:	4343      	muls	r3, r0
 8001260:	0fdd      	lsrs	r5, r3, #31
 8001262:	18ed      	adds	r5, r5, r3
 8001264:	9b01      	ldr	r3, [sp, #4]
 8001266:	9802      	ldr	r0, [sp, #8]
 8001268:	3301      	adds	r3, #1
 800126a:	181b      	adds	r3, r3, r0
 800126c:	106d      	asrs	r5, r5, #1
 800126e:	42ab      	cmp	r3, r5
 8001270:	d900      	bls.n	8001274 <__ssputs_r+0x40>
 8001272:	001d      	movs	r5, r3
 8001274:	0552      	lsls	r2, r2, #21
 8001276:	d529      	bpl.n	80012cc <__ssputs_r+0x98>
 8001278:	0029      	movs	r1, r5
 800127a:	0038      	movs	r0, r7
 800127c:	f7ff ff48 	bl	8001110 <_malloc_r>
 8001280:	1e06      	subs	r6, r0, #0
 8001282:	d02d      	beq.n	80012e0 <__ssputs_r+0xac>
 8001284:	9a02      	ldr	r2, [sp, #8]
 8001286:	6921      	ldr	r1, [r4, #16]
 8001288:	f000 fae7 	bl	800185a <memcpy>
 800128c:	89a2      	ldrh	r2, [r4, #12]
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <__ssputs_r+0xc0>)
 8001290:	401a      	ands	r2, r3
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	4313      	orrs	r3, r2
 8001296:	81a3      	strh	r3, [r4, #12]
 8001298:	9b02      	ldr	r3, [sp, #8]
 800129a:	6126      	str	r6, [r4, #16]
 800129c:	18f6      	adds	r6, r6, r3
 800129e:	6026      	str	r6, [r4, #0]
 80012a0:	6165      	str	r5, [r4, #20]
 80012a2:	9e01      	ldr	r6, [sp, #4]
 80012a4:	1aed      	subs	r5, r5, r3
 80012a6:	60a5      	str	r5, [r4, #8]
 80012a8:	9b01      	ldr	r3, [sp, #4]
 80012aa:	429e      	cmp	r6, r3
 80012ac:	d900      	bls.n	80012b0 <__ssputs_r+0x7c>
 80012ae:	9e01      	ldr	r6, [sp, #4]
 80012b0:	0032      	movs	r2, r6
 80012b2:	9903      	ldr	r1, [sp, #12]
 80012b4:	6820      	ldr	r0, [r4, #0]
 80012b6:	f000 fa9f 	bl	80017f8 <memmove>
 80012ba:	2000      	movs	r0, #0
 80012bc:	68a3      	ldr	r3, [r4, #8]
 80012be:	1b9b      	subs	r3, r3, r6
 80012c0:	60a3      	str	r3, [r4, #8]
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	199b      	adds	r3, r3, r6
 80012c6:	6023      	str	r3, [r4, #0]
 80012c8:	b005      	add	sp, #20
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	002a      	movs	r2, r5
 80012ce:	0038      	movs	r0, r7
 80012d0:	f000 facc 	bl	800186c <_realloc_r>
 80012d4:	1e06      	subs	r6, r0, #0
 80012d6:	d1df      	bne.n	8001298 <__ssputs_r+0x64>
 80012d8:	0038      	movs	r0, r7
 80012da:	6921      	ldr	r1, [r4, #16]
 80012dc:	f7ff feac 	bl	8001038 <_free_r>
 80012e0:	230c      	movs	r3, #12
 80012e2:	2001      	movs	r0, #1
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	89a2      	ldrh	r2, [r4, #12]
 80012e8:	3334      	adds	r3, #52	; 0x34
 80012ea:	4313      	orrs	r3, r2
 80012ec:	81a3      	strh	r3, [r4, #12]
 80012ee:	4240      	negs	r0, r0
 80012f0:	e7ea      	b.n	80012c8 <__ssputs_r+0x94>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	fffffb7f 	.word	0xfffffb7f

080012f8 <_svfiprintf_r>:
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	b0a1      	sub	sp, #132	; 0x84
 80012fc:	9003      	str	r0, [sp, #12]
 80012fe:	001d      	movs	r5, r3
 8001300:	898b      	ldrh	r3, [r1, #12]
 8001302:	000f      	movs	r7, r1
 8001304:	0016      	movs	r6, r2
 8001306:	061b      	lsls	r3, r3, #24
 8001308:	d511      	bpl.n	800132e <_svfiprintf_r+0x36>
 800130a:	690b      	ldr	r3, [r1, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10e      	bne.n	800132e <_svfiprintf_r+0x36>
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	f7ff fefd 	bl	8001110 <_malloc_r>
 8001316:	6038      	str	r0, [r7, #0]
 8001318:	6138      	str	r0, [r7, #16]
 800131a:	2800      	cmp	r0, #0
 800131c:	d105      	bne.n	800132a <_svfiprintf_r+0x32>
 800131e:	230c      	movs	r3, #12
 8001320:	9a03      	ldr	r2, [sp, #12]
 8001322:	3801      	subs	r0, #1
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	b021      	add	sp, #132	; 0x84
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132a:	2340      	movs	r3, #64	; 0x40
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	2300      	movs	r3, #0
 8001330:	ac08      	add	r4, sp, #32
 8001332:	6163      	str	r3, [r4, #20]
 8001334:	3320      	adds	r3, #32
 8001336:	7663      	strb	r3, [r4, #25]
 8001338:	3310      	adds	r3, #16
 800133a:	76a3      	strb	r3, [r4, #26]
 800133c:	9507      	str	r5, [sp, #28]
 800133e:	0035      	movs	r5, r6
 8001340:	782b      	ldrb	r3, [r5, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <_svfiprintf_r+0x52>
 8001346:	2b25      	cmp	r3, #37	; 0x25
 8001348:	d148      	bne.n	80013dc <_svfiprintf_r+0xe4>
 800134a:	1bab      	subs	r3, r5, r6
 800134c:	9305      	str	r3, [sp, #20]
 800134e:	42b5      	cmp	r5, r6
 8001350:	d00b      	beq.n	800136a <_svfiprintf_r+0x72>
 8001352:	0032      	movs	r2, r6
 8001354:	0039      	movs	r1, r7
 8001356:	9803      	ldr	r0, [sp, #12]
 8001358:	f7ff ff6c 	bl	8001234 <__ssputs_r>
 800135c:	3001      	adds	r0, #1
 800135e:	d100      	bne.n	8001362 <_svfiprintf_r+0x6a>
 8001360:	e0af      	b.n	80014c2 <_svfiprintf_r+0x1ca>
 8001362:	6963      	ldr	r3, [r4, #20]
 8001364:	9a05      	ldr	r2, [sp, #20]
 8001366:	189b      	adds	r3, r3, r2
 8001368:	6163      	str	r3, [r4, #20]
 800136a:	782b      	ldrb	r3, [r5, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d100      	bne.n	8001372 <_svfiprintf_r+0x7a>
 8001370:	e0a7      	b.n	80014c2 <_svfiprintf_r+0x1ca>
 8001372:	2201      	movs	r2, #1
 8001374:	2300      	movs	r3, #0
 8001376:	4252      	negs	r2, r2
 8001378:	6062      	str	r2, [r4, #4]
 800137a:	a904      	add	r1, sp, #16
 800137c:	3254      	adds	r2, #84	; 0x54
 800137e:	1852      	adds	r2, r2, r1
 8001380:	1c6e      	adds	r6, r5, #1
 8001382:	6023      	str	r3, [r4, #0]
 8001384:	60e3      	str	r3, [r4, #12]
 8001386:	60a3      	str	r3, [r4, #8]
 8001388:	7013      	strb	r3, [r2, #0]
 800138a:	65a3      	str	r3, [r4, #88]	; 0x58
 800138c:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <_svfiprintf_r+0x1ec>)
 800138e:	2205      	movs	r2, #5
 8001390:	0018      	movs	r0, r3
 8001392:	7831      	ldrb	r1, [r6, #0]
 8001394:	9305      	str	r3, [sp, #20]
 8001396:	f000 fa55 	bl	8001844 <memchr>
 800139a:	1c75      	adds	r5, r6, #1
 800139c:	2800      	cmp	r0, #0
 800139e:	d11f      	bne.n	80013e0 <_svfiprintf_r+0xe8>
 80013a0:	6822      	ldr	r2, [r4, #0]
 80013a2:	06d3      	lsls	r3, r2, #27
 80013a4:	d504      	bpl.n	80013b0 <_svfiprintf_r+0xb8>
 80013a6:	2353      	movs	r3, #83	; 0x53
 80013a8:	a904      	add	r1, sp, #16
 80013aa:	185b      	adds	r3, r3, r1
 80013ac:	2120      	movs	r1, #32
 80013ae:	7019      	strb	r1, [r3, #0]
 80013b0:	0713      	lsls	r3, r2, #28
 80013b2:	d504      	bpl.n	80013be <_svfiprintf_r+0xc6>
 80013b4:	2353      	movs	r3, #83	; 0x53
 80013b6:	a904      	add	r1, sp, #16
 80013b8:	185b      	adds	r3, r3, r1
 80013ba:	212b      	movs	r1, #43	; 0x2b
 80013bc:	7019      	strb	r1, [r3, #0]
 80013be:	7833      	ldrb	r3, [r6, #0]
 80013c0:	2b2a      	cmp	r3, #42	; 0x2a
 80013c2:	d016      	beq.n	80013f2 <_svfiprintf_r+0xfa>
 80013c4:	0035      	movs	r5, r6
 80013c6:	2100      	movs	r1, #0
 80013c8:	200a      	movs	r0, #10
 80013ca:	68e3      	ldr	r3, [r4, #12]
 80013cc:	782a      	ldrb	r2, [r5, #0]
 80013ce:	1c6e      	adds	r6, r5, #1
 80013d0:	3a30      	subs	r2, #48	; 0x30
 80013d2:	2a09      	cmp	r2, #9
 80013d4:	d94e      	bls.n	8001474 <_svfiprintf_r+0x17c>
 80013d6:	2900      	cmp	r1, #0
 80013d8:	d111      	bne.n	80013fe <_svfiprintf_r+0x106>
 80013da:	e017      	b.n	800140c <_svfiprintf_r+0x114>
 80013dc:	3501      	adds	r5, #1
 80013de:	e7af      	b.n	8001340 <_svfiprintf_r+0x48>
 80013e0:	9b05      	ldr	r3, [sp, #20]
 80013e2:	6822      	ldr	r2, [r4, #0]
 80013e4:	1ac0      	subs	r0, r0, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	4083      	lsls	r3, r0
 80013ea:	4313      	orrs	r3, r2
 80013ec:	002e      	movs	r6, r5
 80013ee:	6023      	str	r3, [r4, #0]
 80013f0:	e7cc      	b.n	800138c <_svfiprintf_r+0x94>
 80013f2:	9b07      	ldr	r3, [sp, #28]
 80013f4:	1d19      	adds	r1, r3, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	9107      	str	r1, [sp, #28]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db01      	blt.n	8001402 <_svfiprintf_r+0x10a>
 80013fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001400:	e004      	b.n	800140c <_svfiprintf_r+0x114>
 8001402:	425b      	negs	r3, r3
 8001404:	60e3      	str	r3, [r4, #12]
 8001406:	2302      	movs	r3, #2
 8001408:	4313      	orrs	r3, r2
 800140a:	6023      	str	r3, [r4, #0]
 800140c:	782b      	ldrb	r3, [r5, #0]
 800140e:	2b2e      	cmp	r3, #46	; 0x2e
 8001410:	d10a      	bne.n	8001428 <_svfiprintf_r+0x130>
 8001412:	786b      	ldrb	r3, [r5, #1]
 8001414:	2b2a      	cmp	r3, #42	; 0x2a
 8001416:	d135      	bne.n	8001484 <_svfiprintf_r+0x18c>
 8001418:	9b07      	ldr	r3, [sp, #28]
 800141a:	3502      	adds	r5, #2
 800141c:	1d1a      	adds	r2, r3, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	9207      	str	r2, [sp, #28]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db2b      	blt.n	800147e <_svfiprintf_r+0x186>
 8001426:	9309      	str	r3, [sp, #36]	; 0x24
 8001428:	4e2f      	ldr	r6, [pc, #188]	; (80014e8 <_svfiprintf_r+0x1f0>)
 800142a:	2203      	movs	r2, #3
 800142c:	0030      	movs	r0, r6
 800142e:	7829      	ldrb	r1, [r5, #0]
 8001430:	f000 fa08 	bl	8001844 <memchr>
 8001434:	2800      	cmp	r0, #0
 8001436:	d006      	beq.n	8001446 <_svfiprintf_r+0x14e>
 8001438:	2340      	movs	r3, #64	; 0x40
 800143a:	1b80      	subs	r0, r0, r6
 800143c:	4083      	lsls	r3, r0
 800143e:	6822      	ldr	r2, [r4, #0]
 8001440:	3501      	adds	r5, #1
 8001442:	4313      	orrs	r3, r2
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	7829      	ldrb	r1, [r5, #0]
 8001448:	2206      	movs	r2, #6
 800144a:	4828      	ldr	r0, [pc, #160]	; (80014ec <_svfiprintf_r+0x1f4>)
 800144c:	1c6e      	adds	r6, r5, #1
 800144e:	7621      	strb	r1, [r4, #24]
 8001450:	f000 f9f8 	bl	8001844 <memchr>
 8001454:	2800      	cmp	r0, #0
 8001456:	d03c      	beq.n	80014d2 <_svfiprintf_r+0x1da>
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <_svfiprintf_r+0x1f8>)
 800145a:	2b00      	cmp	r3, #0
 800145c:	d125      	bne.n	80014aa <_svfiprintf_r+0x1b2>
 800145e:	2207      	movs	r2, #7
 8001460:	9b07      	ldr	r3, [sp, #28]
 8001462:	3307      	adds	r3, #7
 8001464:	4393      	bics	r3, r2
 8001466:	3308      	adds	r3, #8
 8001468:	9307      	str	r3, [sp, #28]
 800146a:	6963      	ldr	r3, [r4, #20]
 800146c:	9a04      	ldr	r2, [sp, #16]
 800146e:	189b      	adds	r3, r3, r2
 8001470:	6163      	str	r3, [r4, #20]
 8001472:	e764      	b.n	800133e <_svfiprintf_r+0x46>
 8001474:	4343      	muls	r3, r0
 8001476:	0035      	movs	r5, r6
 8001478:	2101      	movs	r1, #1
 800147a:	189b      	adds	r3, r3, r2
 800147c:	e7a6      	b.n	80013cc <_svfiprintf_r+0xd4>
 800147e:	2301      	movs	r3, #1
 8001480:	425b      	negs	r3, r3
 8001482:	e7d0      	b.n	8001426 <_svfiprintf_r+0x12e>
 8001484:	2300      	movs	r3, #0
 8001486:	200a      	movs	r0, #10
 8001488:	001a      	movs	r2, r3
 800148a:	3501      	adds	r5, #1
 800148c:	6063      	str	r3, [r4, #4]
 800148e:	7829      	ldrb	r1, [r5, #0]
 8001490:	1c6e      	adds	r6, r5, #1
 8001492:	3930      	subs	r1, #48	; 0x30
 8001494:	2909      	cmp	r1, #9
 8001496:	d903      	bls.n	80014a0 <_svfiprintf_r+0x1a8>
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0c5      	beq.n	8001428 <_svfiprintf_r+0x130>
 800149c:	9209      	str	r2, [sp, #36]	; 0x24
 800149e:	e7c3      	b.n	8001428 <_svfiprintf_r+0x130>
 80014a0:	4342      	muls	r2, r0
 80014a2:	0035      	movs	r5, r6
 80014a4:	2301      	movs	r3, #1
 80014a6:	1852      	adds	r2, r2, r1
 80014a8:	e7f1      	b.n	800148e <_svfiprintf_r+0x196>
 80014aa:	aa07      	add	r2, sp, #28
 80014ac:	9200      	str	r2, [sp, #0]
 80014ae:	0021      	movs	r1, r4
 80014b0:	003a      	movs	r2, r7
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <_svfiprintf_r+0x1fc>)
 80014b4:	9803      	ldr	r0, [sp, #12]
 80014b6:	e000      	b.n	80014ba <_svfiprintf_r+0x1c2>
 80014b8:	bf00      	nop
 80014ba:	9004      	str	r0, [sp, #16]
 80014bc:	9b04      	ldr	r3, [sp, #16]
 80014be:	3301      	adds	r3, #1
 80014c0:	d1d3      	bne.n	800146a <_svfiprintf_r+0x172>
 80014c2:	89bb      	ldrh	r3, [r7, #12]
 80014c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80014c6:	065b      	lsls	r3, r3, #25
 80014c8:	d400      	bmi.n	80014cc <_svfiprintf_r+0x1d4>
 80014ca:	e72c      	b.n	8001326 <_svfiprintf_r+0x2e>
 80014cc:	2001      	movs	r0, #1
 80014ce:	4240      	negs	r0, r0
 80014d0:	e729      	b.n	8001326 <_svfiprintf_r+0x2e>
 80014d2:	aa07      	add	r2, sp, #28
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	0021      	movs	r1, r4
 80014d8:	003a      	movs	r2, r7
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <_svfiprintf_r+0x1fc>)
 80014dc:	9803      	ldr	r0, [sp, #12]
 80014de:	f000 f87b 	bl	80015d8 <_printf_i>
 80014e2:	e7ea      	b.n	80014ba <_svfiprintf_r+0x1c2>
 80014e4:	08001a72 	.word	0x08001a72
 80014e8:	08001a78 	.word	0x08001a78
 80014ec:	08001a7c 	.word	0x08001a7c
 80014f0:	00000000 	.word	0x00000000
 80014f4:	08001235 	.word	0x08001235

080014f8 <_printf_common>:
 80014f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014fa:	0016      	movs	r6, r2
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	688a      	ldr	r2, [r1, #8]
 8001500:	690b      	ldr	r3, [r1, #16]
 8001502:	000c      	movs	r4, r1
 8001504:	9000      	str	r0, [sp, #0]
 8001506:	4293      	cmp	r3, r2
 8001508:	da00      	bge.n	800150c <_printf_common+0x14>
 800150a:	0013      	movs	r3, r2
 800150c:	0022      	movs	r2, r4
 800150e:	6033      	str	r3, [r6, #0]
 8001510:	3243      	adds	r2, #67	; 0x43
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	2a00      	cmp	r2, #0
 8001516:	d001      	beq.n	800151c <_printf_common+0x24>
 8001518:	3301      	adds	r3, #1
 800151a:	6033      	str	r3, [r6, #0]
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	069b      	lsls	r3, r3, #26
 8001520:	d502      	bpl.n	8001528 <_printf_common+0x30>
 8001522:	6833      	ldr	r3, [r6, #0]
 8001524:	3302      	adds	r3, #2
 8001526:	6033      	str	r3, [r6, #0]
 8001528:	6822      	ldr	r2, [r4, #0]
 800152a:	2306      	movs	r3, #6
 800152c:	0015      	movs	r5, r2
 800152e:	401d      	ands	r5, r3
 8001530:	421a      	tst	r2, r3
 8001532:	d027      	beq.n	8001584 <_printf_common+0x8c>
 8001534:	0023      	movs	r3, r4
 8001536:	3343      	adds	r3, #67	; 0x43
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	4193      	sbcs	r3, r2
 800153e:	6822      	ldr	r2, [r4, #0]
 8001540:	0692      	lsls	r2, r2, #26
 8001542:	d430      	bmi.n	80015a6 <_printf_common+0xae>
 8001544:	0022      	movs	r2, r4
 8001546:	9901      	ldr	r1, [sp, #4]
 8001548:	9800      	ldr	r0, [sp, #0]
 800154a:	9d08      	ldr	r5, [sp, #32]
 800154c:	3243      	adds	r2, #67	; 0x43
 800154e:	47a8      	blx	r5
 8001550:	3001      	adds	r0, #1
 8001552:	d025      	beq.n	80015a0 <_printf_common+0xa8>
 8001554:	2206      	movs	r2, #6
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	2500      	movs	r5, #0
 800155a:	4013      	ands	r3, r2
 800155c:	2b04      	cmp	r3, #4
 800155e:	d105      	bne.n	800156c <_printf_common+0x74>
 8001560:	6833      	ldr	r3, [r6, #0]
 8001562:	68e5      	ldr	r5, [r4, #12]
 8001564:	1aed      	subs	r5, r5, r3
 8001566:	43eb      	mvns	r3, r5
 8001568:	17db      	asrs	r3, r3, #31
 800156a:	401d      	ands	r5, r3
 800156c:	68a3      	ldr	r3, [r4, #8]
 800156e:	6922      	ldr	r2, [r4, #16]
 8001570:	4293      	cmp	r3, r2
 8001572:	dd01      	ble.n	8001578 <_printf_common+0x80>
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	18ed      	adds	r5, r5, r3
 8001578:	2600      	movs	r6, #0
 800157a:	42b5      	cmp	r5, r6
 800157c:	d120      	bne.n	80015c0 <_printf_common+0xc8>
 800157e:	2000      	movs	r0, #0
 8001580:	e010      	b.n	80015a4 <_printf_common+0xac>
 8001582:	3501      	adds	r5, #1
 8001584:	68e3      	ldr	r3, [r4, #12]
 8001586:	6832      	ldr	r2, [r6, #0]
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	42ab      	cmp	r3, r5
 800158c:	ddd2      	ble.n	8001534 <_printf_common+0x3c>
 800158e:	0022      	movs	r2, r4
 8001590:	2301      	movs	r3, #1
 8001592:	9901      	ldr	r1, [sp, #4]
 8001594:	9800      	ldr	r0, [sp, #0]
 8001596:	9f08      	ldr	r7, [sp, #32]
 8001598:	3219      	adds	r2, #25
 800159a:	47b8      	blx	r7
 800159c:	3001      	adds	r0, #1
 800159e:	d1f0      	bne.n	8001582 <_printf_common+0x8a>
 80015a0:	2001      	movs	r0, #1
 80015a2:	4240      	negs	r0, r0
 80015a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80015a6:	2030      	movs	r0, #48	; 0x30
 80015a8:	18e1      	adds	r1, r4, r3
 80015aa:	3143      	adds	r1, #67	; 0x43
 80015ac:	7008      	strb	r0, [r1, #0]
 80015ae:	0021      	movs	r1, r4
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	3145      	adds	r1, #69	; 0x45
 80015b4:	7809      	ldrb	r1, [r1, #0]
 80015b6:	18a2      	adds	r2, r4, r2
 80015b8:	3243      	adds	r2, #67	; 0x43
 80015ba:	3302      	adds	r3, #2
 80015bc:	7011      	strb	r1, [r2, #0]
 80015be:	e7c1      	b.n	8001544 <_printf_common+0x4c>
 80015c0:	0022      	movs	r2, r4
 80015c2:	2301      	movs	r3, #1
 80015c4:	9901      	ldr	r1, [sp, #4]
 80015c6:	9800      	ldr	r0, [sp, #0]
 80015c8:	9f08      	ldr	r7, [sp, #32]
 80015ca:	321a      	adds	r2, #26
 80015cc:	47b8      	blx	r7
 80015ce:	3001      	adds	r0, #1
 80015d0:	d0e6      	beq.n	80015a0 <_printf_common+0xa8>
 80015d2:	3601      	adds	r6, #1
 80015d4:	e7d1      	b.n	800157a <_printf_common+0x82>
	...

080015d8 <_printf_i>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b08b      	sub	sp, #44	; 0x2c
 80015dc:	9206      	str	r2, [sp, #24]
 80015de:	000a      	movs	r2, r1
 80015e0:	3243      	adds	r2, #67	; 0x43
 80015e2:	9307      	str	r3, [sp, #28]
 80015e4:	9005      	str	r0, [sp, #20]
 80015e6:	9204      	str	r2, [sp, #16]
 80015e8:	7e0a      	ldrb	r2, [r1, #24]
 80015ea:	000c      	movs	r4, r1
 80015ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80015ee:	2a78      	cmp	r2, #120	; 0x78
 80015f0:	d809      	bhi.n	8001606 <_printf_i+0x2e>
 80015f2:	2a62      	cmp	r2, #98	; 0x62
 80015f4:	d80b      	bhi.n	800160e <_printf_i+0x36>
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d100      	bne.n	80015fc <_printf_i+0x24>
 80015fa:	e0be      	b.n	800177a <_printf_i+0x1a2>
 80015fc:	497c      	ldr	r1, [pc, #496]	; (80017f0 <_printf_i+0x218>)
 80015fe:	9103      	str	r1, [sp, #12]
 8001600:	2a58      	cmp	r2, #88	; 0x58
 8001602:	d100      	bne.n	8001606 <_printf_i+0x2e>
 8001604:	e093      	b.n	800172e <_printf_i+0x156>
 8001606:	0026      	movs	r6, r4
 8001608:	3642      	adds	r6, #66	; 0x42
 800160a:	7032      	strb	r2, [r6, #0]
 800160c:	e022      	b.n	8001654 <_printf_i+0x7c>
 800160e:	0010      	movs	r0, r2
 8001610:	3863      	subs	r0, #99	; 0x63
 8001612:	2815      	cmp	r0, #21
 8001614:	d8f7      	bhi.n	8001606 <_printf_i+0x2e>
 8001616:	f7fe fd77 	bl	8000108 <__gnu_thumb1_case_shi>
 800161a:	0016      	.short	0x0016
 800161c:	fff6001f 	.word	0xfff6001f
 8001620:	fff6fff6 	.word	0xfff6fff6
 8001624:	001ffff6 	.word	0x001ffff6
 8001628:	fff6fff6 	.word	0xfff6fff6
 800162c:	fff6fff6 	.word	0xfff6fff6
 8001630:	003600a3 	.word	0x003600a3
 8001634:	fff60083 	.word	0xfff60083
 8001638:	00b4fff6 	.word	0x00b4fff6
 800163c:	0036fff6 	.word	0x0036fff6
 8001640:	fff6fff6 	.word	0xfff6fff6
 8001644:	0087      	.short	0x0087
 8001646:	0026      	movs	r6, r4
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	3642      	adds	r6, #66	; 0x42
 800164c:	1d11      	adds	r1, r2, #4
 800164e:	6019      	str	r1, [r3, #0]
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	7033      	strb	r3, [r6, #0]
 8001654:	2301      	movs	r3, #1
 8001656:	e0a2      	b.n	800179e <_printf_i+0x1c6>
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	6809      	ldr	r1, [r1, #0]
 800165c:	1d02      	adds	r2, r0, #4
 800165e:	060d      	lsls	r5, r1, #24
 8001660:	d50b      	bpl.n	800167a <_printf_i+0xa2>
 8001662:	6805      	ldr	r5, [r0, #0]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	2d00      	cmp	r5, #0
 8001668:	da03      	bge.n	8001672 <_printf_i+0x9a>
 800166a:	232d      	movs	r3, #45	; 0x2d
 800166c:	9a04      	ldr	r2, [sp, #16]
 800166e:	426d      	negs	r5, r5
 8001670:	7013      	strb	r3, [r2, #0]
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <_printf_i+0x218>)
 8001674:	270a      	movs	r7, #10
 8001676:	9303      	str	r3, [sp, #12]
 8001678:	e01b      	b.n	80016b2 <_printf_i+0xda>
 800167a:	6805      	ldr	r5, [r0, #0]
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	0649      	lsls	r1, r1, #25
 8001680:	d5f1      	bpl.n	8001666 <_printf_i+0x8e>
 8001682:	b22d      	sxth	r5, r5
 8001684:	e7ef      	b.n	8001666 <_printf_i+0x8e>
 8001686:	680d      	ldr	r5, [r1, #0]
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	1d08      	adds	r0, r1, #4
 800168c:	6018      	str	r0, [r3, #0]
 800168e:	062e      	lsls	r6, r5, #24
 8001690:	d501      	bpl.n	8001696 <_printf_i+0xbe>
 8001692:	680d      	ldr	r5, [r1, #0]
 8001694:	e003      	b.n	800169e <_printf_i+0xc6>
 8001696:	066d      	lsls	r5, r5, #25
 8001698:	d5fb      	bpl.n	8001692 <_printf_i+0xba>
 800169a:	680d      	ldr	r5, [r1, #0]
 800169c:	b2ad      	uxth	r5, r5
 800169e:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <_printf_i+0x218>)
 80016a0:	2708      	movs	r7, #8
 80016a2:	9303      	str	r3, [sp, #12]
 80016a4:	2a6f      	cmp	r2, #111	; 0x6f
 80016a6:	d000      	beq.n	80016aa <_printf_i+0xd2>
 80016a8:	3702      	adds	r7, #2
 80016aa:	0023      	movs	r3, r4
 80016ac:	2200      	movs	r2, #0
 80016ae:	3343      	adds	r3, #67	; 0x43
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	6863      	ldr	r3, [r4, #4]
 80016b4:	60a3      	str	r3, [r4, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db03      	blt.n	80016c2 <_printf_i+0xea>
 80016ba:	2104      	movs	r1, #4
 80016bc:	6822      	ldr	r2, [r4, #0]
 80016be:	438a      	bics	r2, r1
 80016c0:	6022      	str	r2, [r4, #0]
 80016c2:	2d00      	cmp	r5, #0
 80016c4:	d102      	bne.n	80016cc <_printf_i+0xf4>
 80016c6:	9e04      	ldr	r6, [sp, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00c      	beq.n	80016e6 <_printf_i+0x10e>
 80016cc:	9e04      	ldr	r6, [sp, #16]
 80016ce:	0028      	movs	r0, r5
 80016d0:	0039      	movs	r1, r7
 80016d2:	f7fe fda9 	bl	8000228 <__aeabi_uidivmod>
 80016d6:	9b03      	ldr	r3, [sp, #12]
 80016d8:	3e01      	subs	r6, #1
 80016da:	5c5b      	ldrb	r3, [r3, r1]
 80016dc:	7033      	strb	r3, [r6, #0]
 80016de:	002b      	movs	r3, r5
 80016e0:	0005      	movs	r5, r0
 80016e2:	429f      	cmp	r7, r3
 80016e4:	d9f3      	bls.n	80016ce <_printf_i+0xf6>
 80016e6:	2f08      	cmp	r7, #8
 80016e8:	d109      	bne.n	80016fe <_printf_i+0x126>
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	07db      	lsls	r3, r3, #31
 80016ee:	d506      	bpl.n	80016fe <_printf_i+0x126>
 80016f0:	6862      	ldr	r2, [r4, #4]
 80016f2:	6923      	ldr	r3, [r4, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dc02      	bgt.n	80016fe <_printf_i+0x126>
 80016f8:	2330      	movs	r3, #48	; 0x30
 80016fa:	3e01      	subs	r6, #1
 80016fc:	7033      	strb	r3, [r6, #0]
 80016fe:	9b04      	ldr	r3, [sp, #16]
 8001700:	1b9b      	subs	r3, r3, r6
 8001702:	6123      	str	r3, [r4, #16]
 8001704:	9b07      	ldr	r3, [sp, #28]
 8001706:	0021      	movs	r1, r4
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	9805      	ldr	r0, [sp, #20]
 800170c:	9b06      	ldr	r3, [sp, #24]
 800170e:	aa09      	add	r2, sp, #36	; 0x24
 8001710:	f7ff fef2 	bl	80014f8 <_printf_common>
 8001714:	3001      	adds	r0, #1
 8001716:	d147      	bne.n	80017a8 <_printf_i+0x1d0>
 8001718:	2001      	movs	r0, #1
 800171a:	4240      	negs	r0, r0
 800171c:	b00b      	add	sp, #44	; 0x2c
 800171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001720:	2220      	movs	r2, #32
 8001722:	6809      	ldr	r1, [r1, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	6022      	str	r2, [r4, #0]
 8001728:	2278      	movs	r2, #120	; 0x78
 800172a:	4932      	ldr	r1, [pc, #200]	; (80017f4 <_printf_i+0x21c>)
 800172c:	9103      	str	r1, [sp, #12]
 800172e:	0021      	movs	r1, r4
 8001730:	3145      	adds	r1, #69	; 0x45
 8001732:	700a      	strb	r2, [r1, #0]
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	c920      	ldmia	r1!, {r5}
 800173a:	0610      	lsls	r0, r2, #24
 800173c:	d402      	bmi.n	8001744 <_printf_i+0x16c>
 800173e:	0650      	lsls	r0, r2, #25
 8001740:	d500      	bpl.n	8001744 <_printf_i+0x16c>
 8001742:	b2ad      	uxth	r5, r5
 8001744:	6019      	str	r1, [r3, #0]
 8001746:	07d3      	lsls	r3, r2, #31
 8001748:	d502      	bpl.n	8001750 <_printf_i+0x178>
 800174a:	2320      	movs	r3, #32
 800174c:	4313      	orrs	r3, r2
 800174e:	6023      	str	r3, [r4, #0]
 8001750:	2710      	movs	r7, #16
 8001752:	2d00      	cmp	r5, #0
 8001754:	d1a9      	bne.n	80016aa <_printf_i+0xd2>
 8001756:	2220      	movs	r2, #32
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	4393      	bics	r3, r2
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	e7a4      	b.n	80016aa <_printf_i+0xd2>
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	680d      	ldr	r5, [r1, #0]
 8001764:	1d10      	adds	r0, r2, #4
 8001766:	6949      	ldr	r1, [r1, #20]
 8001768:	6018      	str	r0, [r3, #0]
 800176a:	6813      	ldr	r3, [r2, #0]
 800176c:	062e      	lsls	r6, r5, #24
 800176e:	d501      	bpl.n	8001774 <_printf_i+0x19c>
 8001770:	6019      	str	r1, [r3, #0]
 8001772:	e002      	b.n	800177a <_printf_i+0x1a2>
 8001774:	066d      	lsls	r5, r5, #25
 8001776:	d5fb      	bpl.n	8001770 <_printf_i+0x198>
 8001778:	8019      	strh	r1, [r3, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	9e04      	ldr	r6, [sp, #16]
 800177e:	6123      	str	r3, [r4, #16]
 8001780:	e7c0      	b.n	8001704 <_printf_i+0x12c>
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	1d11      	adds	r1, r2, #4
 8001786:	6019      	str	r1, [r3, #0]
 8001788:	6816      	ldr	r6, [r2, #0]
 800178a:	2100      	movs	r1, #0
 800178c:	0030      	movs	r0, r6
 800178e:	6862      	ldr	r2, [r4, #4]
 8001790:	f000 f858 	bl	8001844 <memchr>
 8001794:	2800      	cmp	r0, #0
 8001796:	d001      	beq.n	800179c <_printf_i+0x1c4>
 8001798:	1b80      	subs	r0, r0, r6
 800179a:	6060      	str	r0, [r4, #4]
 800179c:	6863      	ldr	r3, [r4, #4]
 800179e:	6123      	str	r3, [r4, #16]
 80017a0:	2300      	movs	r3, #0
 80017a2:	9a04      	ldr	r2, [sp, #16]
 80017a4:	7013      	strb	r3, [r2, #0]
 80017a6:	e7ad      	b.n	8001704 <_printf_i+0x12c>
 80017a8:	0032      	movs	r2, r6
 80017aa:	6923      	ldr	r3, [r4, #16]
 80017ac:	9906      	ldr	r1, [sp, #24]
 80017ae:	9805      	ldr	r0, [sp, #20]
 80017b0:	9d07      	ldr	r5, [sp, #28]
 80017b2:	47a8      	blx	r5
 80017b4:	3001      	adds	r0, #1
 80017b6:	d0af      	beq.n	8001718 <_printf_i+0x140>
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	079b      	lsls	r3, r3, #30
 80017bc:	d415      	bmi.n	80017ea <_printf_i+0x212>
 80017be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017c0:	68e0      	ldr	r0, [r4, #12]
 80017c2:	4298      	cmp	r0, r3
 80017c4:	daaa      	bge.n	800171c <_printf_i+0x144>
 80017c6:	0018      	movs	r0, r3
 80017c8:	e7a8      	b.n	800171c <_printf_i+0x144>
 80017ca:	0022      	movs	r2, r4
 80017cc:	2301      	movs	r3, #1
 80017ce:	9906      	ldr	r1, [sp, #24]
 80017d0:	9805      	ldr	r0, [sp, #20]
 80017d2:	9e07      	ldr	r6, [sp, #28]
 80017d4:	3219      	adds	r2, #25
 80017d6:	47b0      	blx	r6
 80017d8:	3001      	adds	r0, #1
 80017da:	d09d      	beq.n	8001718 <_printf_i+0x140>
 80017dc:	3501      	adds	r5, #1
 80017de:	68e3      	ldr	r3, [r4, #12]
 80017e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	42ab      	cmp	r3, r5
 80017e6:	dcf0      	bgt.n	80017ca <_printf_i+0x1f2>
 80017e8:	e7e9      	b.n	80017be <_printf_i+0x1e6>
 80017ea:	2500      	movs	r5, #0
 80017ec:	e7f7      	b.n	80017de <_printf_i+0x206>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	08001a83 	.word	0x08001a83
 80017f4:	08001a94 	.word	0x08001a94

080017f8 <memmove>:
 80017f8:	b510      	push	{r4, lr}
 80017fa:	4288      	cmp	r0, r1
 80017fc:	d902      	bls.n	8001804 <memmove+0xc>
 80017fe:	188b      	adds	r3, r1, r2
 8001800:	4298      	cmp	r0, r3
 8001802:	d303      	bcc.n	800180c <memmove+0x14>
 8001804:	2300      	movs	r3, #0
 8001806:	e007      	b.n	8001818 <memmove+0x20>
 8001808:	5c8b      	ldrb	r3, [r1, r2]
 800180a:	5483      	strb	r3, [r0, r2]
 800180c:	3a01      	subs	r2, #1
 800180e:	d2fb      	bcs.n	8001808 <memmove+0x10>
 8001810:	bd10      	pop	{r4, pc}
 8001812:	5ccc      	ldrb	r4, [r1, r3]
 8001814:	54c4      	strb	r4, [r0, r3]
 8001816:	3301      	adds	r3, #1
 8001818:	429a      	cmp	r2, r3
 800181a:	d1fa      	bne.n	8001812 <memmove+0x1a>
 800181c:	e7f8      	b.n	8001810 <memmove+0x18>
	...

08001820 <_sbrk_r>:
 8001820:	2300      	movs	r3, #0
 8001822:	b570      	push	{r4, r5, r6, lr}
 8001824:	4d06      	ldr	r5, [pc, #24]	; (8001840 <_sbrk_r+0x20>)
 8001826:	0004      	movs	r4, r0
 8001828:	0008      	movs	r0, r1
 800182a:	602b      	str	r3, [r5, #0]
 800182c:	f7ff fb58 	bl	8000ee0 <_sbrk>
 8001830:	1c43      	adds	r3, r0, #1
 8001832:	d103      	bne.n	800183c <_sbrk_r+0x1c>
 8001834:	682b      	ldr	r3, [r5, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d000      	beq.n	800183c <_sbrk_r+0x1c>
 800183a:	6023      	str	r3, [r4, #0]
 800183c:	bd70      	pop	{r4, r5, r6, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	200001b8 	.word	0x200001b8

08001844 <memchr>:
 8001844:	b2c9      	uxtb	r1, r1
 8001846:	1882      	adds	r2, r0, r2
 8001848:	4290      	cmp	r0, r2
 800184a:	d101      	bne.n	8001850 <memchr+0xc>
 800184c:	2000      	movs	r0, #0
 800184e:	4770      	bx	lr
 8001850:	7803      	ldrb	r3, [r0, #0]
 8001852:	428b      	cmp	r3, r1
 8001854:	d0fb      	beq.n	800184e <memchr+0xa>
 8001856:	3001      	adds	r0, #1
 8001858:	e7f6      	b.n	8001848 <memchr+0x4>

0800185a <memcpy>:
 800185a:	2300      	movs	r3, #0
 800185c:	b510      	push	{r4, lr}
 800185e:	429a      	cmp	r2, r3
 8001860:	d100      	bne.n	8001864 <memcpy+0xa>
 8001862:	bd10      	pop	{r4, pc}
 8001864:	5ccc      	ldrb	r4, [r1, r3]
 8001866:	54c4      	strb	r4, [r0, r3]
 8001868:	3301      	adds	r3, #1
 800186a:	e7f8      	b.n	800185e <memcpy+0x4>

0800186c <_realloc_r>:
 800186c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800186e:	0007      	movs	r7, r0
 8001870:	000e      	movs	r6, r1
 8001872:	0014      	movs	r4, r2
 8001874:	2900      	cmp	r1, #0
 8001876:	d105      	bne.n	8001884 <_realloc_r+0x18>
 8001878:	0011      	movs	r1, r2
 800187a:	f7ff fc49 	bl	8001110 <_malloc_r>
 800187e:	0005      	movs	r5, r0
 8001880:	0028      	movs	r0, r5
 8001882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001884:	2a00      	cmp	r2, #0
 8001886:	d103      	bne.n	8001890 <_realloc_r+0x24>
 8001888:	f7ff fbd6 	bl	8001038 <_free_r>
 800188c:	0025      	movs	r5, r4
 800188e:	e7f7      	b.n	8001880 <_realloc_r+0x14>
 8001890:	f000 f81b 	bl	80018ca <_malloc_usable_size_r>
 8001894:	9001      	str	r0, [sp, #4]
 8001896:	4284      	cmp	r4, r0
 8001898:	d803      	bhi.n	80018a2 <_realloc_r+0x36>
 800189a:	0035      	movs	r5, r6
 800189c:	0843      	lsrs	r3, r0, #1
 800189e:	42a3      	cmp	r3, r4
 80018a0:	d3ee      	bcc.n	8001880 <_realloc_r+0x14>
 80018a2:	0021      	movs	r1, r4
 80018a4:	0038      	movs	r0, r7
 80018a6:	f7ff fc33 	bl	8001110 <_malloc_r>
 80018aa:	1e05      	subs	r5, r0, #0
 80018ac:	d0e8      	beq.n	8001880 <_realloc_r+0x14>
 80018ae:	9b01      	ldr	r3, [sp, #4]
 80018b0:	0022      	movs	r2, r4
 80018b2:	429c      	cmp	r4, r3
 80018b4:	d900      	bls.n	80018b8 <_realloc_r+0x4c>
 80018b6:	001a      	movs	r2, r3
 80018b8:	0031      	movs	r1, r6
 80018ba:	0028      	movs	r0, r5
 80018bc:	f7ff ffcd 	bl	800185a <memcpy>
 80018c0:	0031      	movs	r1, r6
 80018c2:	0038      	movs	r0, r7
 80018c4:	f7ff fbb8 	bl	8001038 <_free_r>
 80018c8:	e7da      	b.n	8001880 <_realloc_r+0x14>

080018ca <_malloc_usable_size_r>:
 80018ca:	1f0b      	subs	r3, r1, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1f18      	subs	r0, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da01      	bge.n	80018d8 <_malloc_usable_size_r+0xe>
 80018d4:	580b      	ldr	r3, [r1, r0]
 80018d6:	18c0      	adds	r0, r0, r3
 80018d8:	4770      	bx	lr
	...

080018dc <_init>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e2:	bc08      	pop	{r3}
 80018e4:	469e      	mov	lr, r3
 80018e6:	4770      	bx	lr

080018e8 <_fini>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ee:	bc08      	pop	{r3}
 80018f0:	469e      	mov	lr, r3
 80018f2:	4770      	bx	lr
